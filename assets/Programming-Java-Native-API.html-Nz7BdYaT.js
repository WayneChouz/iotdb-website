import{_ as i,c as l,b as e,d as n,e as a,a as p,w as c,r as o,o as r}from"./app-DlvtCRQV.js";const u={};function d(m,s){const t=o("RouteLink");return r(),l("div",null,[s[6]||(s[6]=e(`<h1 id="java-native-api" tabindex="-1"><a class="header-anchor" href="#java-native-api"><span>Java Native API</span></a></h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>Dependencies</span></a></h3><ul><li>JDK &gt;= 1.8</li><li>Maven &gt;= 3.6</li></ul><h3 id="using-iotdb-java-native-api-with-maven" tabindex="-1"><a class="header-anchor" href="#using-iotdb-java-native-api-with-maven"><span>Using IoTDB Java Native API with Maven</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.iotdb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>iotdb-session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="syntax-convention" tabindex="-1"><a class="header-anchor" href="#syntax-convention"><span>Syntax Convention</span></a></h2>`,7)),n("ul",null,[n("li",null,[s[1]||(s[1]=n("strong",null,"IoTDB-SQL interface:",-1)),s[2]||(s[2]=a(" The input SQL parameter needs to conform to the ")),p(t,{to:"/UserGuide/latest/User-Manual/Syntax-Rule.html#Literal-Values"},{default:c(()=>s[0]||(s[0]=[a("syntax conventions")])),_:1}),s[3]||(s[3]=a(" and be escaped for JAVA strings. For example, you need to add a backslash before the double-quotes. (That is: after JAVA escaping, it is consistent with the SQL statement executed on the command line.)"))]),s[4]||(s[4]=n("li",null,[n("strong",null,"Other interfaces:"),n("ul",null,[n("li",null,"The node names in path or path prefix as parameter: The node names which should be escaped by backticks (`) in the SQL statement, escaping is required here."),n("li",null,"Identifiers (such as template names) as parameters: The identifiers which should be escaped by backticks (`) in the SQL statement, and escaping is not required here.")])],-1)),s[5]||(s[5]=n("li",null,[n("strong",null,"Code example for syntax convention could be found at:"),a(),n("code",null,"example/session/src/main/java/org/apache/iotdb/SyntaxConventionRelatedExample.java")],-1))]),s[7]||(s[7]=e(`<h2 id="native-apis" tabindex="-1"><a class="header-anchor" href="#native-apis"><span>Native APIs</span></a></h2><p>Here we show the commonly used interfaces and their parameters in the Native API:</p><h3 id="session-management" tabindex="-1"><a class="header-anchor" href="#session-management"><span>Session Management</span></a></h3><ul><li>Initialize a Session</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// use default configuration </span></span>
<span class="line">session <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Session<span class="token punctuation">.</span>Builder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// initialize with a single node</span></span>
<span class="line">session <span class="token operator">=</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Session<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// initialize with multiple nodes</span></span>
<span class="line">session <span class="token operator">=</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Session<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">nodeUrls</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeUrls<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// other configurations</span></span>
<span class="line">session <span class="token operator">=</span> </span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Session<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">fetchSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> fetchSize<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">thriftDefaultBufferSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> thriftDefaultBufferSize<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">thriftMaxFrameSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> thriftMaxFrameSize<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">enableRedirection</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enableRedirection<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Version</span> version<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Version represents the SQL semantic version used by the client, which is used to be compatible with the SQL semantics of 0.12 when upgrading 0.13. The possible values are: <code>V_0_12</code>, <code>V_0_13</code>, <code>V_1_0</code>, etc.</p><ul><li>Open a Session</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Open a session, with a parameter to specify whether to enable RPC compression</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enableRPCCompression<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice: this RPC compression status of client must comply with that of IoTDB server</p><ul><li>Close a Session</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>SessionPool</li></ul><p>We provide a connection pool (\`SessionPool) for Native API.<br> Using the interface, you need to define the pool size.</p><p>If you can not get a session connection in 60 seconds, there is a warning log but the program will hang.</p><p>If a session has finished an operation, it will be put back to the pool automatically.<br> If a session connection is broken, the session will be removed automatically and the pool will try<br> to create a new session and redo the operation.<br> You can also specify an url list of multiple reachable nodes when creating a SessionPool, just as you would when creating a Session. To ensure high availability of clients in distributed cluster.</p><p>For query operations:</p><ol><li>When using SessionPool to query data, the result set is <code>SessionDataSetWrapper</code>;</li><li>Given a <code>SessionDataSetWrapper</code>, if you have not scanned all the data in it and stop to use it,<br> you have to call <code>SessionPool.closeResultSet(wrapper)</code> manually;</li><li>When you call <code>hasNext()</code> and <code>next()</code> of a <code>SessionDataSetWrapper</code> and there is an exception, then<br> you have to call <code>SessionPool.closeResultSet(wrapper)</code> manually;</li><li>You can call <code>getColumnNames()</code> of <code>SessionDataSetWrapper</code> to get the column names of query result;</li></ol><p>Examples: <code>session/src/test/java/org/apache/iotdb/session/pool/SessionPoolTest.java</code></p><p>Or <code>example/session/src/main/java/org/apache/iotdb/SessionPoolExample.java</code></p><h3 id="database-timeseries-management-api" tabindex="-1"><a class="header-anchor" href="#database-timeseries-management-api"><span>Database &amp; Timeseries Management API</span></a></h3><h4 id="database-management" tabindex="-1"><a class="header-anchor" href="#database-management"><span>Database Management</span></a></h4><ul><li>CREATE DATABASE</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">setStorageGroup</span><span class="token punctuation">(</span><span class="token class-name">String</span> storageGroupId<span class="token punctuation">)</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Delete one or several databases</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">deleteStorageGroup</span><span class="token punctuation">(</span><span class="token class-name">String</span> storageGroup<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">deleteStorageGroups</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> storageGroups<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="timeseries-management" tabindex="-1"><a class="header-anchor" href="#timeseries-management"><span>Timeseries Management</span></a></h4><ul><li>Create one or multiple timeseries</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">createTimeseries</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">TSDataType</span> dataType<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">TSEncoding</span> encoding<span class="token punctuation">,</span> <span class="token class-name">CompressionType</span> compressor<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> props<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tags<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">,</span> <span class="token class-name">String</span> measurementAlias<span class="token punctuation">)</span></span>
<span class="line">      </span>
<span class="line"><span class="token keyword">void</span> <span class="token function">createMultiTimeseries</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span></span> dataTypes<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TSEncoding</span><span class="token punctuation">&gt;</span></span> encodings<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompressionType</span><span class="token punctuation">&gt;</span></span> compressors<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> propsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tagsList<span class="token punctuation">,</span></span>
<span class="line">      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> attributesList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> measurementAliasList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Create aligned timeseries</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">void createAlignedTimeseries(String prefixPath, List&lt;String&gt; measurements,</span>
<span class="line">      List&lt;TSDataType&gt; dataTypes, List&lt;TSEncoding&gt; encodings,</span>
<span class="line">      List &lt;CompressionType&gt; compressors, List&lt;String&gt; measurementAliasList);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Attention: Alias of measurements are <strong>not supported</strong> currently.</p><ul><li>Delete one or several timeseries</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">deleteTimeseries</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">deleteTimeseries</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Check whether the specific timeseries exists.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">boolean</span> <span class="token function">checkTimeseriesExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="schema-template" tabindex="-1"><a class="header-anchor" href="#schema-template"><span>Schema Template</span></a></h4><p>Create a schema template for massive identical devices will help to improve memory performance. You can use Template, InternalNode and MeasurementNode to depict the structure of the template, and use belowed interface to create it inside session.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">Template</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Class</span> <span class="token class-name">Template</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> directShareTime<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isShareTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToTemplate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteFromTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShareTime</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> shareTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Abstract</span> <span class="token class-name">Class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Class</span> <span class="token class-name">MeasurementNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">TSDataType</span> dataType<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">TSEncoding</span> encoding<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">CompressionType</span> compressor<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MeasurementNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> </span>
<span class="line">                           <span class="token class-name">TSDataType</span> dataType<span class="token punctuation">,</span> </span>
<span class="line">                           <span class="token class-name">TSEncoding</span> encoding<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token class-name">CompressionType</span> compressor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We strongly suggest you implement templates only with flat-measurement (like object &#39;flatTemplate&#39; in belowed snippet), since tree-structured template may not be a long-term supported feature in further version of IoTDB.</p><p>A snippet of using above Method and Class：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">MeasurementNode</span> nodeX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeasurementNode</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token class-name">TSDataType</span><span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token class-name">TSEncoding</span><span class="token punctuation">.</span><span class="token constant">RLE</span><span class="token punctuation">,</span> <span class="token class-name">CompressionType</span><span class="token punctuation">.</span><span class="token constant">SNAPPY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">MeasurementNode</span> nodeY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeasurementNode</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token class-name">TSDataType</span><span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token class-name">TSEncoding</span><span class="token punctuation">.</span><span class="token constant">RLE</span><span class="token punctuation">,</span> <span class="token class-name">CompressionType</span><span class="token punctuation">.</span><span class="token constant">SNAPPY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">MeasurementNode</span> nodeSpeed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeasurementNode</span><span class="token punctuation">(</span><span class="token string">&quot;speed&quot;</span><span class="token punctuation">,</span> <span class="token class-name">TSDataType</span><span class="token punctuation">.</span><span class="token constant">DOUBLE</span><span class="token punctuation">,</span> <span class="token class-name">TSEncoding</span><span class="token punctuation">.</span><span class="token constant">GORILLA</span><span class="token punctuation">,</span> <span class="token class-name">CompressionType</span><span class="token punctuation">.</span><span class="token constant">SNAPPY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is the template we suggest to implement</span></span>
<span class="line"><span class="token class-name">Template</span> flatTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token string">&quot;flatTemplate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">template<span class="token punctuation">.</span><span class="token function">addToTemplate</span><span class="token punctuation">(</span>nodeX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">template<span class="token punctuation">.</span><span class="token function">addToTemplate</span><span class="token punctuation">(</span>nodeY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">template<span class="token punctuation">.</span><span class="token function">addToTemplate</span><span class="token punctuation">(</span>nodeSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createSchemaTemplate</span><span class="token punctuation">(</span>flatTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can query measurement inside templates with these APIS:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Return the amount of measurements inside a template</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countMeasurementsInTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return true if path points to a measurement, otherwise returne false</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMeasurementInTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return true if path exists in template, otherwise return false</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPathExistInTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return all measurements paths inside template</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">showMeasurementsInTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return all measurements paths under the designated patter inside template</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">showMeasurementsInTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To implement schema template, you can set the measurement template named &#39;templateName&#39; at path &#39;prefixPath&#39;.</p><p><strong>Please notice that, we strongly recommend not setting templates on the nodes above the database to accommodate future updates and collaboration between modules.</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">setSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">,</span> <span class="token class-name">String</span> prefixPath<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Before setting template, you should firstly create the template using</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">createSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">Template</span> template<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After setting template to a certain path, you can use the template to create timeseries on given device paths through the following interface, or you can write data directly to trigger timeseries auto creation using schema template under target devices.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">createTimeseriesUsingSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> devicePathList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After setting template to a certain path, you can query for info about template using belowed interface in session:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@return</span> All template names. */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">showAllTemplates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@return</span> All paths have been set to designated template. */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">showPathsTemplateSetOn</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@return</span> All paths are using designated template. */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">showPathsTemplateUsingOn</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are ready to get rid of schema template, you can drop it with belowed interface. Make sure the template to drop has been unset from MTree.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">unsetSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefixPath<span class="token punctuation">,</span> <span class="token class-name">String</span> templateName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dropSchemaTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Unset the measurement template named &#39;templateName&#39; from path &#39;prefixPath&#39;. When you issue this interface, you should assure that there is a template named &#39;templateName&#39; set at the path &#39;prefixPath&#39;.</p><p>Attention: Unsetting the template named &#39;templateName&#39; from node at path &#39;prefixPath&#39; or descendant nodes which have already inserted records using template is <strong>not supported</strong>.</p><h3 id="data-manipulation-interface-dml-interface" tabindex="-1"><a class="header-anchor" href="#data-manipulation-interface-dml-interface"><span>Data Manipulation Interface (DML Interface)</span></a></h3><h3 id="data-insert-api" tabindex="-1"><a class="header-anchor" href="#data-insert-api"><span>Data Insert API</span></a></h3><p>It is recommended to use insertTablet to help improve write efficiency.</p><ul><li>Insert a Tablet，which is multiple rows of a device, each row has the same measurements <ul><li><strong>Better Write Performance</strong></li><li><strong>Support batch write</strong></li><li><strong>Support null values</strong>: fill the null value with any value, and then mark the null value via BitMap</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertTablet</span><span class="token punctuation">(</span><span class="token class-name">Tablet</span> tablet<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tablet</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token doc-comment comment">/** deviceId of this tablet */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">String</span> prefixPath<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** the list of measurement schemas for creating the tablet */</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MeasurementSchema</span><span class="token punctuation">&gt;</span></span> schemas<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** timestamps in this tablet */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> timestamps<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** each object is a primitive type array, which represents values of one measurement */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** each bitmap represents the existence of each value in the current column. */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">BitMap</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bitMaps<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** the number of rows to include in this tablet */</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">int</span> rowSize<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** the maximum number of rows for this tablet */</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">int</span> maxRowNumber<span class="token punctuation">;</span></span>
<span class="line">  <span class="token doc-comment comment">/** whether this tablet store data of aligned timeseries or not */</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">boolean</span> isAligned<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Tablets</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertTablets</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tablet</span><span class="token punctuation">&gt;</span></span> tablet<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>Insert a Record, which contains multiple measurement value of a device at a timestamp. This method is equivalent to providing a common interface for multiple data types of values. Later, the value can be cast to the original type through TSDataType.</p><p>The correspondence between the Object type and the TSDataType type is shown in the following table.</p><table><thead><tr><th>TSDataType</th><th>Object</th></tr></thead><tbody><tr><td>BOOLEAN</td><td>Boolean</td></tr><tr><td>INT32</td><td>Integer</td></tr><tr><td>DATE</td><td>LocalDate</td></tr><tr><td>INT64</td><td>Long</td></tr><tr><td>TIMESTAMP</td><td>Long</td></tr><tr><td>FLOAT</td><td>Float</td></tr><tr><td>DOUBLE</td><td>Double</td></tr><tr><td>TEXT</td><td>String, Binary</td></tr><tr><td>STRING</td><td>String, Binary</td></tr><tr><td>BLOB</td><td>Binary</td></tr></tbody></table></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> deviceId<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> measurements<span class="token punctuation">,</span></span>
<span class="line">   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span></span> types<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Records</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertRecords</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deviceIds<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typesList<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Records that belong to the same device.<br> With type info the server has no need to do type inference, which leads a better performance</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertRecordsOfOneDevice</span><span class="token punctuation">(</span><span class="token class-name">String</span> deviceId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typesList<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insert-with-type-inference" tabindex="-1"><a class="header-anchor" href="#insert-with-type-inference"><span>Insert with type inference</span></a></h4><p>When the data is of String type, we can use the following interface to perform type inference based on the value of the value itself. For example, if value is &quot;true&quot; , it can be automatically inferred to be a boolean type. If value is &quot;3.2&quot; , it can be automatically inferred as a flout type. Without type information, server has to do type inference, which may cost some time.</p><ul><li>Insert a Record, which contains multiple measurement value of a device at a timestamp</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefixPath<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> measurements<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Insert multiple Records</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertRecords</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deviceIds<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span> </span>
<span class="line">   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert multiple Records that belong to the same device.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">insertStringRecordsOfOneDevice</span><span class="token punctuation">(</span><span class="token class-name">String</span> deviceId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insert-of-aligned-timeseries" tabindex="-1"><a class="header-anchor" href="#insert-of-aligned-timeseries"><span>Insert of Aligned Timeseries</span></a></h4><p>The Insert of aligned timeseries uses interfaces like insertAlignedXXX, and others are similar to the above interfaces:</p><ul><li>insertAlignedRecord</li><li>insertAlignedRecords</li><li>insertAlignedRecordsOfOneDevice</li><li>insertAlignedStringRecordsOfOneDevice</li><li>insertAlignedTablet</li><li>insertAlignedTablets</li></ul><h3 id="data-delete-api" tabindex="-1"><a class="header-anchor" href="#data-delete-api"><span>Data Delete API</span></a></h3><ul><li>Delete data before or equal to a timestamp of one or several timeseries</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">deleteData</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">deleteData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-query-api" tabindex="-1"><a class="header-anchor" href="#data-query-api"><span>Data Query API</span></a></h3><ul><li>Time-series raw data query with time range: <ul><li>The specified query time range is a left-closed right-open interval, including the start time but excluding the end time.</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeRawDataQuery</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">,</span> <span class="token keyword">long</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>Last query:</p><ul><li>Query the last data, whose timestamp is greater than or equal LastTime.<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeLastDataQuery</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token class-name">LastTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>Query the latest point of the specified series of single device quickly, and support redirection;<br> If you are sure that the query path is valid, set &#39;isLegalPathNodes&#39; to true to avoid performance penalties from path verification.<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeLastDataQueryForOneDevice</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">String</span> db<span class="token punctuation">,</span> <span class="token class-name">String</span> device<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sensors<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isLegalPathNodes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Aggregation query:</p><ul><li>Support specified query time range: The specified query time range is a left-closed right-open interval, including the start time but not the end time.</li><li>Support GROUP BY TIME.</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeAggregationQuery</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Aggregation</span><span class="token punctuation">&gt;</span></span> aggregations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeAggregationQuery</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Aggregation</span><span class="token punctuation">&gt;</span></span> aggregations<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">,</span> <span class="token keyword">long</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeAggregationQuery</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Aggregation</span><span class="token punctuation">&gt;</span></span> aggregations<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> startTime<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> endTime<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeAggregationQuery</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Aggregation</span><span class="token punctuation">&gt;</span></span> aggregations<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> startTime<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> endTime<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> interval<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">long</span> slidingStep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Execute query statement</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">SessionDataSet</span> <span class="token function">executeQueryStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="data-subscription" tabindex="-1"><a class="header-anchor" href="#data-subscription"><span>Data Subscription</span></a></h3><h4 id="_1-topic-management" tabindex="-1"><a class="header-anchor" href="#_1-topic-management"><span>1 Topic Management</span></a></h4><p>The <code>SubscriptionSession</code> class in the IoTDB subscription client provides interfaces for topic management. The status changes of topics are illustrated in the diagram below:</p><div align="center"><img src="https://alioss.timecho.com/docs/img/Data_sub_04.png" alt="" style="width:60%;"></div><h5 id="_1-1-create-topic" tabindex="-1"><a class="header-anchor" href="#_1-1-create-topic"><span>1.1 Create Topic</span></a></h5><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line"> void createTopicIfNotExists(String topicName, Properties properties) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Example:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">try (final SubscriptionSession session = new SubscriptionSession(host, port)) {</span>
<span class="line">  session.open();</span>
<span class="line">  final Properties config = new Properties();</span>
<span class="line">  config.put(TopicConstant.PATH_KEY, &quot;root.db.**&quot;);</span>
<span class="line">  session.createTopic(topicName, config);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-delete-topic" tabindex="-1"><a class="header-anchor" href="#_1-2-delete-topic"><span>1.2 Delete Topic</span></a></h5><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">void dropTopicIfExists(String topicName) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_1-3-view-topic" tabindex="-1"><a class="header-anchor" href="#_1-3-view-topic"><span>1.3 View Topic</span></a></h5><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">// Get all topics</span>
<span class="line">Set&lt;Topic&gt; getTopics() throws Exception;</span>
<span class="line"></span>
<span class="line">// Get a specific topic</span>
<span class="line">Optional&lt;Topic&gt; getTopic(String topicName) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-check-subscription-status" tabindex="-1"><a class="header-anchor" href="#_2-check-subscription-status"><span>2 Check Subscription Status</span></a></h4><p>The <code>SubscriptionSession</code> class in the IoTDB subscription client provides interfaces to check the subscription status:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">Set&lt;Subscription&gt; getSubscriptions() throws Exception;</span>
<span class="line">Set&lt;Subscription&gt; getSubscriptions(final String topicName) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-create-consumer" tabindex="-1"><a class="header-anchor" href="#_3-create-consumer"><span>3 Create Consumer</span></a></h4><p>When creating a consumer using the JAVA native interface, you need to specify the parameters applied to the consumer.</p><p>For both <code>SubscriptionPullConsumer</code> and <code>SubscriptionPushConsumer</code>, the following common configurations are available:</p><table><thead><tr><th style="text-align:left;">key</th><th style="text-align:left;"><strong>required or optional with default</strong></th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;">host</td><td style="text-align:left;">optional: 127.0.0.1</td><td style="text-align:left;"><code>String</code>: The RPC host of a certain DataNode in IoTDB</td></tr><tr><td style="text-align:left;">port</td><td style="text-align:left;">optional: 6667</td><td style="text-align:left;">Integer: The RPC port of a certain DataNode in IoTDB</td></tr><tr><td style="text-align:left;">node-urls</td><td style="text-align:left;">optional: 127.0.0.1:6667</td><td style="text-align:left;"><code>List&lt;String&gt;</code>: The RPC addresses of all DataNodes in IoTDB, can be multiple; either host:port or node-urls can be filled in. If both host:port and node-urls are filled in, the union of host:port and node-urls will be used to form a new node-urls application</td></tr><tr><td style="text-align:left;">username</td><td style="text-align:left;">optional: root</td><td style="text-align:left;"><code>String</code>: The username of a DataNode in IoTDB</td></tr><tr><td style="text-align:left;">password</td><td style="text-align:left;">optional: root</td><td style="text-align:left;"><code>String</code>: The password of a DataNode in IoTDB</td></tr><tr><td style="text-align:left;">groupId</td><td style="text-align:left;">optional</td><td style="text-align:left;"><code>String</code>: consumer group id, if not specified, a new consumer group will be randomly assigned, ensuring that different consumer groups have different consumer group ids</td></tr><tr><td style="text-align:left;">consumerId</td><td style="text-align:left;">optional</td><td style="text-align:left;"><code>String</code>: consumer client id, if not specified, it will be randomly assigned, ensuring that each consumer client id in the same consumer group is unique</td></tr><tr><td style="text-align:left;">heartbeatIntervalMs</td><td style="text-align:left;">optional: 30000 (min: 1000)</td><td style="text-align:left;"><code>Long</code>: The interval at which the consumer sends heartbeat requests to the IoTDB DataNode</td></tr><tr><td style="text-align:left;">endpointsSyncIntervalMs</td><td style="text-align:left;">optional: 120000 (min: 5000)</td><td style="text-align:left;"><code>Long</code>: The interval at which the consumer detects the expansion and contraction of IoTDB cluster nodes and adjusts the subscription connection</td></tr><tr><td style="text-align:left;">fileSaveDir</td><td style="text-align:left;">optional: Paths.get(System.getProperty(&quot;user.dir&quot;), &quot;iotdb-subscription&quot;).toString()</td><td style="text-align:left;"><code>String</code>: The temporary directory path where the TsFile files subscribed by the consumer are stored</td></tr><tr><td style="text-align:left;">fileSaveFsync</td><td style="text-align:left;">optional: false</td><td style="text-align:left;"><code>Boolean</code>: Whether the consumer actively calls fsync during the subscription of TsFile</td></tr></tbody></table><h5 id="_3-1-subscriptionpushconsumer" tabindex="-1"><a class="header-anchor" href="#_3-1-subscriptionpushconsumer"><span>3.1 SubscriptionPushConsumer</span></a></h5><p>The following are special configurations for <code>SubscriptionPushConsumer</code>:</p><table><thead><tr><th style="text-align:left;">key</th><th style="text-align:left;"><strong>required or optional with default</strong></th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;">ackStrategy</td><td style="text-align:left;">optional: <code>ACKStrategy.AFTER_CONSUME</code></td><td style="text-align:left;">Consumption progress confirmation mechanism includes the following options: <code>ACKStrategy.BEFORE_CONSUME</code> (submit consumption progress immediately when the consumer receives data, before <code>onReceive</code>) <code>ACKStrategy.AFTER_CONSUME</code> (submit consumption progress after the consumer has consumed the data, after <code>onReceive</code>)</td></tr><tr><td style="text-align:left;">consumeListener</td><td style="text-align:left;">optional</td><td style="text-align:left;">Consumption data callback function, need to implement the <code>ConsumeListener</code> interface, define the consumption logic of <code>SessionDataSetsHandler</code> and <code>TsFileHandler</code> form data</td></tr><tr><td style="text-align:left;">autoPollIntervalMs</td><td style="text-align:left;">optional: 5000 (min: 500)</td><td style="text-align:left;">Long: The interval at which the consumer automatically pulls data, in ms</td></tr><tr><td style="text-align:left;">autoPollTimeoutMs</td><td style="text-align:left;">optional: 10000 (min: 1000)</td><td style="text-align:left;">Long: The timeout time for the consumer to pull data each time, in ms</td></tr></tbody></table><p>Among them, the ConsumerListener interface is defined as follows:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">@FunctionInterface</span>
<span class="line">interface ConsumeListener {</span>
<span class="line">  default ConsumeResult onReceive(Message message) {</span>
<span class="line">    return ConsumeResult.SUCCESS;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">enum ConsumeResult {</span>
<span class="line">  SUCCESS,</span>
<span class="line">  FAILURE,</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-subscriptionpullconsumer" tabindex="-1"><a class="header-anchor" href="#_3-2-subscriptionpullconsumer"><span>3.2 SubscriptionPullConsumer</span></a></h5><p>The following are special configurations for <code>SubscriptionPullConsumer</code> :</p><table><thead><tr><th style="text-align:left;">key</th><th style="text-align:left;"><strong>required or optional with default</strong></th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;">autoCommit</td><td style="text-align:left;">optional: true</td><td style="text-align:left;">Boolean: Whether to automatically commit consumption progress. If this parameter is set to false, the commit method must be called to manually <code>commit</code> consumption progress.</td></tr><tr><td style="text-align:left;">autoCommitInterval</td><td style="text-align:left;">optional: 5000 (min: 500)</td><td style="text-align:left;">Long: The interval at which consumption progress is automatically committed, in milliseconds. This only takes effect when the autoCommit parameter is true.</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p>After creating a consumer, you need to manually call the consumer&#39;s open method:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">void open() throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>At this point, the IoTDB subscription client will verify the correctness of the consumer&#39;s configuration. After a successful verification, the consumer will join the corresponding consumer group. That is, only after opening the consumer can you use the returned consumer object to subscribe to topics, consume data, and perform other operations.</p><h4 id="_4-subscribe-to-topics" tabindex="-1"><a class="header-anchor" href="#_4-subscribe-to-topics"><span>4 Subscribe to Topics</span></a></h4><p>Both <code>SubscriptionPushConsumer</code> and <code>SubscriptionPullConsumer</code> provide the following JAVA native interfaces for subscribing to topics:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">// Subscribe to topics</span>
<span class="line">void subscribe(String topic) throws Exception;</span>
<span class="line">void subscribe(List&lt;String&gt; topics) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Before a consumer subscribes to a topic, the topic must have been created, otherwise, the subscription will fail.</p></li><li><p>If a consumer subscribes to a topic that it has already subscribed to, no error will occur.</p></li><li><p>If there are other consumers in the same consumer group that have subscribed to the same topics, the consumer will reuse the corresponding consumption progress.</p></li></ul><h4 id="_5-consume-data" tabindex="-1"><a class="header-anchor" href="#_5-consume-data"><span>5 Consume Data</span></a></h4><p>For both push and pull mode consumers:</p><ul><li><p>Only after explicitly subscribing to a topic will the consumer receive data for that topic.</p></li><li><p>If no topics are subscribed to after creation, the consumer will not be able to consume any data, even if other consumers in the same consumer group have subscribed to some topics.</p></li></ul><h5 id="_5-1-subscriptionpushconsumer" tabindex="-1"><a class="header-anchor" href="#_5-1-subscriptionpushconsumer"><span>5.1 SubscriptionPushConsumer</span></a></h5><p>After <code>SubscriptionPushConsumer</code> subscribes to topics, there is no need to manually pull data.</p><p>The data consumption logic is within the <code>consumeListener</code> configuration specified when creating <code>SubscriptionPushConsumer</code>.</p><h5 id="_5-2-subscriptionpullconsumer" tabindex="-1"><a class="header-anchor" href="#_5-2-subscriptionpullconsumer"><span>5.2 SubscriptionPullConsumer</span></a></h5><p>After SubscriptionPullConsumer subscribes to topics, it needs to actively call the poll method to pull data:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">List&lt;SubscriptionMessage&gt; poll(final Duration timeout) throws Exception;</span>
<span class="line">List&lt;SubscriptionMessage&gt; poll(final long timeoutMs) throws Exception;</span>
<span class="line">List&lt;SubscriptionMessage&gt; poll(final Set&lt;String&gt; topicNames, final Duration timeout) throws Exception;</span>
<span class="line">List&lt;SubscriptionMessage&gt; poll(final Set&lt;String&gt; topicNames, final long timeoutMs) throws Exception;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the poll method, you can specify the topic names to be pulled (if not specified, it defaults to pulling all topics that the consumer has subscribed to) and the timeout period.</p><p>When the SubscriptionPullConsumer is configured with the autoCommit parameter set to false, it is necessary to manually call the commitSync and commitAsync methods to synchronously or asynchronously commit the consumption progress of a batch of data:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">void commitSync(final SubscriptionMessage message) throws Exception;</span>
<span class="line">void commitSync(final Iterable&lt;SubscriptionMessage&gt; messages) throws Exception;</span>
<span class="line"></span>
<span class="line">CompletableFuture&lt;Void&gt; commitAsync(final SubscriptionMessage message);</span>
<span class="line">CompletableFuture&lt;Void&gt; commitAsync(final Iterable&lt;SubscriptionMessage&gt; messages);</span>
<span class="line">void commitAsync(final SubscriptionMessage message, final AsyncCommitCallback callback);</span>
<span class="line">void commitAsync(final Iterable&lt;SubscriptionMessage&gt; messages, final AsyncCommitCallback callback);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The AsyncCommitCallback class is defined as follows:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">public interface AsyncCommitCallback {</span>
<span class="line">  default void onComplete() {</span>
<span class="line">    // Do nothing</span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">  default void onFailure(final Throwable e) {</span>
<span class="line">    // Do nothing</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-unsubscribe" tabindex="-1"><a class="header-anchor" href="#_6-unsubscribe"><span>6 Unsubscribe</span></a></h4><p>The <code>SubscriptionPushConsumer</code> and <code>SubscriptionPullConsumer</code> provide the following JAVA native interfaces for unsubscribing and closing the consumer:</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">// Unsubscribe from topics</span>
<span class="line">void unsubscribe(String topic) throws Exception;</span>
<span class="line">void unsubscribe(List&lt;String&gt; topics) throws Exception;</span>
<span class="line"></span>
<span class="line">// Close consumer</span>
<span class="line">void close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If a consumer unsubscribes from a topic that it has not subscribed to, no error will occur.</li><li>When a consumer is closed, it will exit the corresponding consumer group and automatically unsubscribe from all topics it is currently subscribed to.</li><li>Once a consumer is closed, its lifecycle ends, and it cannot be reopened to subscribe to and consume data again.</li></ul><h4 id="_7-code-examples" tabindex="-1"><a class="header-anchor" href="#_7-code-examples"><span>7 Code Examples</span></a></h4><h5 id="_7-1-single-pull-consumer-consuming-sessiondatasetshandler-format-data" tabindex="-1"><a class="header-anchor" href="#_7-1-single-pull-consumer-consuming-sessiondatasetshandler-format-data"><span>7.1 Single Pull Consumer Consuming SessionDataSetsHandler Format Data</span></a></h5><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">// Create topics</span>
<span class="line">try (final SubscriptionSession session = new SubscriptionSession(HOST, PORT)) {</span>
<span class="line">  session.open();</span>
<span class="line">  final Properties config = new Properties();</span>
<span class="line">  config.put(TopicConstant.PATH_KEY, &quot;root.db.**&quot;);</span>
<span class="line">  session.createTopic(TOPIC_1, config);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// Subscription: property-style ctor</span>
<span class="line">final Properties config = new Properties();</span>
<span class="line">config.put(ConsumerConstant.CONSUMER_ID_KEY, &quot;c1&quot;);</span>
<span class="line">config.put(ConsumerConstant.CONSUMER_GROUP_ID_KEY, &quot;cg1&quot;);</span>
<span class="line"></span>
<span class="line">final SubscriptionPullConsumer consumer1 = new SubscriptionPullConsumer(config);</span>
<span class="line">consumer1.open();</span>
<span class="line">consumer1.subscribe(TOPIC_1);</span>
<span class="line">while (true) {</span>
<span class="line">  LockSupport.parkNanos(SLEEP_NS); // wait some time</span>
<span class="line">  final List&lt;SubscriptionMessage&gt; messages = consumer1.poll(POLL_TIMEOUT_MS);</span>
<span class="line">  for (final SubscriptionMessage message : messages) {</span>
<span class="line">    for (final SubscriptionSessionDataSet dataSet : message.getSessionDataSetsHandler()) {</span>
<span class="line">      System.out.println(dataSet.getColumnNames());</span>
<span class="line">      System.out.println(dataSet.getColumnTypes());</span>
<span class="line">      while (dataSet.hasNext()) {</span>
<span class="line">        System.out.println(dataSet.next());</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">  // Auto commit</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// Show topics and subscriptions</span>
<span class="line">try (final SubscriptionSession session = new SubscriptionSession(HOST, PORT)) {</span>
<span class="line">  session.open();</span>
<span class="line">  session.getTopics().forEach((System.out::println));</span>
<span class="line">  session.getSubscriptions().forEach((System.out::println));</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">consumer1.unsubscribe(TOPIC_1);</span>
<span class="line">consumer1.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-2-multiple-push-consumers-consuming-tsfilehandler-format-data" tabindex="-1"><a class="header-anchor" href="#_7-2-multiple-push-consumers-consuming-tsfilehandler-format-data"><span>7.2 Multiple Push Consumers Consuming TsFileHandler Format Data</span></a></h5><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">// Create topics</span>
<span class="line">try (final SubscriptionSession subscriptionSession = new SubscriptionSession(HOST, PORT)) {</span>
<span class="line">  subscriptionSession.open();</span>
<span class="line">  final Properties config = new Properties();</span>
<span class="line">  config.put(TopicConstant.FORMAT_KEY, TopicConstant.FORMAT_TS_FILE_HANDLER_VALUE);</span>
<span class="line">  subscriptionSession.createTopic(TOPIC_2, config);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">final List&lt;Thread&gt; threads = new ArrayList&lt;&gt;();</span>
<span class="line">for (int i = 0; i &lt; 8; ++i) {</span>
<span class="line">  final int idx = i;</span>
<span class="line">  final Thread thread =</span>
<span class="line">      new Thread(</span>
<span class="line">          () -&gt; {</span>
<span class="line">            // Subscription: builder-style ctor</span>
<span class="line">            try (final SubscriptionPushConsumer consumer2 =</span>
<span class="line">                new SubscriptionPushConsumer.Builder()</span>
<span class="line">                    .consumerId(&quot;c&quot; + idx)</span>
<span class="line">                    .consumerGroupId(&quot;cg2&quot;)</span>
<span class="line">                    .fileSaveDir(System.getProperty(&quot;java.io.tmpdir&quot;))</span>
<span class="line">                    .ackStrategy(AckStrategy.AFTER_CONSUME)</span>
<span class="line">                    .consumeListener(</span>
<span class="line">                        message -&gt; {</span>
<span class="line">                          doSomething(message.getTsFileHandler());</span>
<span class="line">                          return ConsumeResult.SUCCESS;</span>
<span class="line">                        })</span>
<span class="line">                    .buildPushConsumer()) {</span>
<span class="line">              consumer2.open();</span>
<span class="line">              consumer2.subscribe(TOPIC_2);</span>
<span class="line">              // block the consumer main thread</span>
<span class="line">              Thread.sleep(Long.MAX_VALUE);</span>
<span class="line">            } catch (final IOException | InterruptedException e) {</span>
<span class="line">              throw new RuntimeException(e);</span>
<span class="line">            }</span>
<span class="line">          });</span>
<span class="line">  thread.start();</span>
<span class="line">  threads.add(thread);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">for (final Thread thread : threads) {</span>
<span class="line">  thread.join();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="other-modules-execute-sql-directly" tabindex="-1"><a class="header-anchor" href="#other-modules-execute-sql-directly"><span>Other Modules (Execute SQL Directly)</span></a></h3><ul><li>Execute non query statement</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">executeNonQueryStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="write-test-interface-to-profile-network-cost" tabindex="-1"><a class="header-anchor" href="#write-test-interface-to-profile-network-cost"><span>Write Test Interface (to profile network cost)</span></a></h3><p>These methods <strong>don&#39;t</strong> insert data into database and server just return after accept the request.</p><ul><li>Test the network and client cost of insertRecord</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">testInsertRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> deviceId<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> measurements<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">testInsertRecord</span><span class="token punctuation">(</span><span class="token class-name">String</span> deviceId<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> measurements<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span></span> types<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Test the network and client cost of insertRecords</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">testInsertRecords</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deviceIds<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line"><span class="token keyword">void</span> <span class="token function">testInsertRecords</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deviceIds<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> times<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> measurementsList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TSDataType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typesList</span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> valuesList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Test the network and client cost of insertTablet</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">testInsertTablet</span><span class="token punctuation">(</span><span class="token class-name">Tablet</span> tablet<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Test the network and client cost of insertTablets</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">testInsertTablets</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tablet</span><span class="token punctuation">&gt;</span></span> tablets<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="coding-examples" tabindex="-1"><a class="header-anchor" href="#coding-examples"><span>Coding Examples</span></a></h3><p>To get more information of the following interfaces, please view session/src/main/java/org/apache/iotdb/session/Session.java</p><p>The sample code of using these interfaces is in example/session/src/main/java/org/apache/iotdb/SessionExample.java，which provides an example of how to open an IoTDB session, execute a batch insertion.</p><p>For examples of aligned timeseries and measurement template, you can refer to <code>example/session/src/main/java/org/apache/iotdb/AlignedTimeseriesSessionExample.java</code></p>`,166))])}const v=i(u,[["render",d],["__file","Programming-Java-Native-API.html.vue"]]),g=JSON.parse('{"path":"/UserGuide/latest/API/Programming-Java-Native-API.html","title":"Java Native API","lang":"en-US","frontmatter":{"description":"Java Native API Installation Dependencies JDK >= 1.8 Maven >= 3.6 Using IoTDB Java Native API with Maven Syntax Convention IoTDB-SQL interface: The input SQL parameter needs to ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/latest/API/Programming-Java-Native-API.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/latest/API/Programming-Java-Native-API.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Java Native API"}],["meta",{"property":"og:description","content":"Java Native API Installation Dependencies JDK >= 1.8 Maven >= 3.6 Using IoTDB Java Native API with Maven Syntax Convention IoTDB-SQL interface: The input SQL parameter needs to ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T09:44:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T09:44:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Native API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-04T09:44:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[{"level":3,"title":"Dependencies","slug":"dependencies","link":"#dependencies","children":[]},{"level":3,"title":"Using IoTDB Java Native API with Maven","slug":"using-iotdb-java-native-api-with-maven","link":"#using-iotdb-java-native-api-with-maven","children":[]}]},{"level":2,"title":"Syntax Convention","slug":"syntax-convention","link":"#syntax-convention","children":[]},{"level":2,"title":"Native APIs","slug":"native-apis","link":"#native-apis","children":[{"level":3,"title":"Session Management","slug":"session-management","link":"#session-management","children":[]},{"level":3,"title":"Database & Timeseries Management API","slug":"database-timeseries-management-api","link":"#database-timeseries-management-api","children":[]},{"level":3,"title":"Data Manipulation Interface (DML Interface)","slug":"data-manipulation-interface-dml-interface","link":"#data-manipulation-interface-dml-interface","children":[]},{"level":3,"title":"Data Insert API","slug":"data-insert-api","link":"#data-insert-api","children":[]},{"level":3,"title":"Data Delete API","slug":"data-delete-api","link":"#data-delete-api","children":[]},{"level":3,"title":"Data Query API","slug":"data-query-api","link":"#data-query-api","children":[]},{"level":3,"title":"Data Subscription","slug":"data-subscription","link":"#data-subscription","children":[]},{"level":3,"title":"Other Modules (Execute SQL Directly)","slug":"other-modules-execute-sql-directly","link":"#other-modules-execute-sql-directly","children":[]},{"level":3,"title":"Write Test Interface (to profile network cost)","slug":"write-test-interface-to-profile-network-cost","link":"#write-test-interface-to-profile-network-cost","children":[]},{"level":3,"title":"Coding Examples","slug":"coding-examples","link":"#coding-examples","children":[]}]}],"git":{"createdTime":1688958677000,"updatedTime":1733305491000,"contributors":[{"name":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":3},{"name":"Chen YZ","email":"43774645+Cpaulyz@users.noreply.github.com","commits":1},{"name":"CritasWang","email":"critas@outlook.com","commits":1},{"name":"Haonan","email":"hhaonan@outlook.com","commits":1},{"name":"StefanieZhao7","email":"131440380+StefanieZhao7@users.noreply.github.com","commits":1},{"name":"VGalaxies","email":"dyc1904821183@gmail.com","commits":1},{"name":"majialin","email":"107627937+mal117@users.noreply.github.com","commits":1},{"name":"wanghui42","email":"105700158+wanghui42@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.34,"words":3703},"filePathRelative":"UserGuide/latest/API/Programming-Java-Native-API.md","localizedDate":"July 10, 2023","autoDesc":true}');export{v as comp,g as data};

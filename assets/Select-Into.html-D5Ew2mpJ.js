import{_ as o,c as e,b as a,d as p,e as n,a as t,f as r,r as c,o as i}from"./app-DpMqthmH.js";const d={};function B(y,s){const l=c("RouteLink");return i(),e("div",null,[s[3]||(s[3]=a(`<h1 id="查询写回-select-into" tabindex="-1"><a class="header-anchor" href="#查询写回-select-into"><span>查询写回（SELECT INTO）</span></a></h1><p><code>SELECT INTO</code> 语句用于将查询结果写入一系列指定的时间序列中。</p><p>应用场景如下：</p><ul><li><strong>实现 IoTDB 内部 ETL</strong>：对原始数据进行 ETL 处理后写入新序列。</li><li><strong>查询结果存储</strong>：将查询结果进行持久化存储，起到类似物化视图的作用。</li><li><strong>非对齐序列转对齐序列</strong>：对齐序列从0.13版本开始支持，可以通过该功能将非对齐序列的数据写入新的对齐序列中。</li></ul><h2 id="语法定义" tabindex="-1"><a class="header-anchor" href="#语法定义"><span>语法定义</span></a></h2><h3 id="整体描述" tabindex="-1"><a class="header-anchor" href="#整体描述"><span>整体描述</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">selectIntoStatement</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#C678DD;">SELECT</span></span>
<span class="line"><span style="color:#ABB2BF;">        resultColumn </span><span style="color:#E06C75;">[, resultColumn]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#C678DD;">        INTO</span><span style="color:#ABB2BF;"> intoItem </span><span style="color:#E06C75;">[, intoItem]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#C678DD;">        FROM</span><span style="color:#ABB2BF;"> prefixPath </span><span style="color:#E06C75;">[, prefixPath]</span><span style="color:#ABB2BF;"> ...</span></span>
<span class="line"><span style="color:#E06C75;">        [WHERE whereCondition]</span></span>
<span class="line"><span style="color:#E06C75;">        [GROUP BY groupByTimeClause, groupByLevelClause]</span></span>
<span class="line"><span style="color:#E06C75;">        [FILL {PREVIOUS | LINEAR | constant}]</span></span>
<span class="line"><span style="color:#E06C75;">        [LIMIT rowLimit OFFSET rowOffset]</span></span>
<span class="line"><span style="color:#E06C75;">        [ALIGN BY DEVICE]</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">intoItem</span></span>
<span class="line"><span style="color:#ABB2BF;">    : </span><span style="color:#E06C75;">[ALIGNED]</span><span style="color:#ABB2BF;"> intoDevicePath </span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#ABB2BF;"> intoMeasurementName </span><span style="color:#E06C75;">[&#39;,&#39; intoMeasurementName]</span><span style="color:#ABB2BF;">* </span><span style="color:#98C379;">&#39;)&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="into-子句" tabindex="-1"><a class="header-anchor" href="#into-子句"><span><code>INTO</code> 子句</span></a></h3><p><code>INTO</code> 子句由若干个 <code>intoItem</code> 构成。</p><p>每个 <code>intoItem</code> 由一个目标设备路径和一个包含若干目标物理量名的列表组成（与 <code>INSERT</code> 语句中的 <code>INTO</code> 子句写法类似）。</p><p>其中每个目标物理量名与目标设备路径组成一个目标序列，一个 <code>intoItem</code> 包含若干目标序列。例如：<code>root.sg_copy.d1(s1, s2)</code> 指定了两条目标序列 <code>root.sg_copy.d1.s1</code> 和 <code>root.sg_copy.d1.s2</code>。</p><p><code>INTO</code> 子句指定的目标序列要能够与查询结果集的列一一对应。具体规则如下：</p><ul><li><strong>按时间对齐</strong>（默认）：全部 <code>intoItem</code> 包含的目标序列数量要与查询结果集的列数（除时间列外）一致，且按照表头从左到右的顺序一一对应。</li><li><strong>按设备对齐</strong>（使用 <code>ALIGN BY DEVICE</code>）：全部 <code>intoItem</code> 中指定的目标设备数和查询的设备数（即 <code>FROM</code> 子句中路径模式匹配的设备数）一致，且按照结果集设备的输出顺序一一对应。<br> 为每个目标设备指定的目标物理量数量要与查询结果集的列数（除时间和设备列外）一致，且按照表头从左到右的顺序一一对应。</li></ul><p>下面通过示例进一步说明：</p><ul><li><strong>示例 1</strong>（按时间对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d2</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d1.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d2.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d1.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">12000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg.d2.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.725s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将 <code>root.sg</code> database 下四条序列的查询结果写入到 <code>root.sg_copy</code> database 下指定的四条序列中。注意，<code>root.sg_copy.d2(t1, t2)</code> 也可以写做 <code>root.sg_copy.d2(t1), root.sg_copy.d2(t2)</code>。</p><p>可以看到，<code>INTO</code> 子句的写法非常灵活，只要满足组合出的目标序列没有重复，且与查询结果列一一对应即可。</p><blockquote><p><code>CLI</code> 展示的结果集中，各列的含义如下：</p><ul><li><code>source column</code> 列表示查询结果的列名。</li><li><code>target timeseries</code> 表示对应列写入的目标序列。</li><li><code>written</code> 表示预期写入的数据量。</li></ul></blockquote><ul><li><strong>示例 2</strong>（按时间对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">into</span><span style="color:#98C379;"> root.agg.count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1_add_s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.agg.last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> group</span><span style="color:#98C379;"> by</span><span style="color:#ABB2BF;"> ([0, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">), 10ms);</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|                         </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|        </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">count(root.sg.d1.s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> root.sg.d1.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.agg.count.s1_add_s2</span><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#61AFEF;">last_value(root.sg.d1.s2</span><span style="color:#ABB2BF;">)|   </span><span style="color:#61AFEF;">root.agg.last_value.s2</span><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">10</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------------------+-------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.375s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将聚合查询的结果存储到指定序列中。</p><ul><li><strong>示例 3</strong>（按设备对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.sg_copy.d1</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.sg_copy.d2</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">t1,</span><span style="color:#98C379;"> t2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#98C379;"> align</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d1.t2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">11000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">12000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg_copy.d2.t2</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">9000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+-------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.625s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句同样是将 <code>root.sg</code> database 下四条序列的查询结果写入到 <code>root.sg_copy</code> database 下指定的四条序列中。但在按设备对齐中，<code>intoItem</code> 的数量必须和查询的设备数量一致，每个查询设备对应一个 <code>intoItem</code>。</p><blockquote><p>按设备对齐查询时，<code>CLI</code> 展示的结果集多出一列 <code>source device</code> 列表示查询的设备。</p></blockquote><ul><li><strong>示例 4</strong>（按设备对齐）</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#98C379;"> s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> into</span><span style="color:#98C379;"> root.expr.add</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">d1s1_d1s2</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> root.expr.add</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">d2s1_d2s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">from</span><span style="color:#98C379;"> root.sg.d1,</span><span style="color:#98C379;"> root.sg.d2</span><span style="color:#98C379;"> align</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> device</span><span style="color:#ABB2BF;">| </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d1</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.expr.add.d1s1_d1s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">root.sg.d2</span><span style="color:#ABB2BF;">|       </span><span style="color:#61AFEF;">s1</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.expr.add.d2s1_d2s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------+--------------+------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.532s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句将表达式计算的结果存储到指定序列中。</p><h3 id="使用变量占位符" tabindex="-1"><a class="header-anchor" href="#使用变量占位符"><span>使用变量占位符</span></a></h3><p>特别地，可以使用变量占位符描述目标序列与查询序列之间的对应规律，简化语句书写。目前支持以下两种变量占位符：</p><ul><li>后缀复制符 <code>::</code>：复制查询设备后缀（或物理量），表示从该层开始一直到设备的最后一层（或物理量），目标设备的节点名（或物理量名）与查询的设备对应的节点名（或物理量名）相同。</li><li>单层节点匹配符 <code>\${i}</code>：表示目标序列当前层节点名与查询序列的第<code>i</code>层节点名相同。比如，对于路径<code>root.sg1.d1.s1</code>而言，<code>\${1}</code>表示<code>sg1</code>，<code>\${2}</code>表示<code>d1</code>，<code>\${3}</code>表示<code>s1</code>。</li></ul><p>在使用变量占位符时，<code>intoItem</code>与查询结果集列的对应关系不能存在歧义，具体情况分类讨论如下：</p><h4 id="按时间对齐-默认" tabindex="-1"><a class="header-anchor" href="#按时间对齐-默认"><span>按时间对齐（默认）</span></a></h4><blockquote><p>注：变量占位符<strong>只能描述序列与序列之间的对应关系</strong>，如果查询中包含聚合、表达式计算，此时查询结果中的列无法与某个序列对应，因此目标设备和目标物理量都不能使用变量占位符。</p></blockquote><h5 id="_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符"><span>（1）目标设备不使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h5><p><strong>限制：</strong></p><ol><li>每个 <code>intoItem</code> 中，物理量列表的长度必须为 1。<br>（如果长度可以大于1，例如 <code>root.sg1.d1(::, s1)</code>，无法确定具体哪些列与<code>::</code>匹配）</li><li><code>intoItem</code> 数量为 1，或与查询结果集列数一致。<br>（在每个目标物理量列表长度均为 1 的情况下，若 <code>intoItem</code> 只有 1 个，此时表示全部查询序列写入相同设备；若 <code>intoItem</code> 数量与查询序列一致，则表示为每个查询序列指定一个目标设备；若 <code>intoItem</code> 大于 1 小于查询序列数，此时无法与查询序列一一对应）</li></ol><p><strong>匹配方法：</strong> 每个查询序列指定目标设备，而目标物理量根据变量占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(::), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(\${</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">}), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(::)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该语句等价于：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s1), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(s2), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(s2)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在这种情况下，语句并不能得到很好地简化。</p><h5 id="_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符"><span>（2）目标设备使用变量占位符 &amp; 目标物理量列表不使用变量占位符</span></a></h5><p><strong>限制：</strong> 全部 <code>intoItem</code> 中目标物理量的数量与查询结果集列数一致。</p><p><strong>匹配方式：</strong> 为每个查询序列指定了目标物理量，目标设备根据对应目标物理量所在 <code>intoItem</code> 的目标设备占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#D19A66;"> d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d1</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d2</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">d3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">s4</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#ABB2BF;"> ::(s1_1, s2_2), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2_2(s3_3), </span><span style="color:#C678DD;">root</span><span style="color:#ABB2BF;">.\${</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}_copy.::(s4)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-目标设备使用变量占位符-目标物理量列表使用变量占位符" tabindex="-1"><a class="header-anchor" href="#_3-目标设备使用变量占位符-目标物理量列表使用变量占位符"><span>（3）目标设备使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h5><p><strong>限制：</strong> <code>intoItem</code> 只有一个且物理量列表的长度为 1。</p><p><strong>匹配方式：</strong> 每个查询序列根据变量占位符可以得到一个目标序列。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_bk</span><span style="color:#ABB2BF;">.::(::) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.**;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 <code>root.sg</code> 下全部序列的查询结果写到 <code>root.sg_bk</code>，设备名后缀和物理量名保持不变。</p><h4 id="按设备对齐-使用-align-by-device" tabindex="-1"><a class="header-anchor" href="#按设备对齐-使用-align-by-device"><span>按设备对齐（使用 <code>ALIGN BY DEVICE</code>）</span></a></h4><blockquote><p>注：变量占位符<strong>只能描述序列与序列之间的对应关系</strong>，如果查询中包含聚合、表达式计算，此时查询结果中的列无法与某个物理量对应，因此目标物理量不能使用变量占位符。</p></blockquote><h5 id="_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_1-目标设备不使用变量占位符-目标物理量列表使用变量占位符-1"><span>（1）目标设备不使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h5><p><strong>限制：</strong> 每个 <code>intoItem</code> 中，如果物理量列表使用了变量占位符，则列表的长度必须为 1。</p><p><strong>匹配方法：</strong> 每个查询序列指定目标设备，而目标物理量根据变量占位符生成。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2, s3, s4</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">backup_sg</span><span style="color:#ABB2BF;">.d1(s1, s2, s3, s4), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">backup_sg</span><span style="color:#ABB2BF;">.d2(::), </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d3(backup_\${</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d3</span></span>
<span class="line"><span style="color:#ABB2BF;">align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_2-目标设备使用变量占位符-目标物理量列表不使用变量占位符-1"><span>（2）目标设备使用变量占位符 &amp; 目标物理量列表不使用变量占位符</span></a></h5><p><strong>限制：</strong> <code>intoItem</code> 只有一个。（如果出现多个带占位符的 <code>intoItem</code>，我们将无法得知每个 <code>intoItem</code> 需要匹配哪几个源设备）</p><p><strong>匹配方式：</strong> 每个查询设备根据变量占位符得到一个目标设备，每个设备下结果集各列写入的目标物理量由目标物理量列表指定。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#56B6C2;"> avg</span><span style="color:#ABB2BF;">(s1), </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s2) + </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(s3), </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(s4)</span></span>
<span class="line"><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">agg_</span><span style="color:#ABB2BF;">\${</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}.::(avg_s1, sum_s2_add_s3, count_s4)</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#C678DD;"> root</span><span style="color:#ABB2BF;">.**</span></span>
<span class="line"><span style="color:#ABB2BF;">align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-目标设备使用变量占位符-目标物理量列表使用变量占位符-1" tabindex="-1"><a class="header-anchor" href="#_3-目标设备使用变量占位符-目标物理量列表使用变量占位符-1"><span>（3）目标设备使用变量占位符 &amp; 目标物理量列表使用变量占位符</span></a></h5><p><strong>限制：</strong> <code>intoItem</code> 只有一个且物理量列表的长度为 1。</p><p><strong>匹配方式：</strong> 每个查询序列根据变量占位符可以得到一个目标序列。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> * </span><span style="color:#C678DD;">into</span><span style="color:#ABB2BF;"> ::(backup_\${</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.** align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 <code>root.sg</code> 下每条序列的查询结果写到相同设备下，物理量名前加<code>backup_</code>。</p><h3 id="指定目标序列为对齐序列" tabindex="-1"><a class="header-anchor" href="#指定目标序列为对齐序列"><span>指定目标序列为对齐序列</span></a></h3><p>通过 <code>ALIGNED</code> 关键词可以指定写入的目标设备为对齐写入，每个 <code>intoItem</code> 可以独立设置。</p><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> s1, s2 </span><span style="color:#C678DD;">into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d1(t1, t2), aligned </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg_copy</span><span style="color:#ABB2BF;">.d2(t1, t2) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d1, </span><span style="color:#D19A66;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">.d2 align </span><span style="color:#C678DD;">by</span><span style="color:#ABB2BF;"> device;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该语句指定了 <code>root.sg_copy.d1</code> 是非对齐设备，<code>root.sg_copy.d2</code>是对齐设备。</p><h3 id="不支持使用的查询子句" tabindex="-1"><a class="header-anchor" href="#不支持使用的查询子句"><span>不支持使用的查询子句</span></a></h3><ul><li><code>SLIMIT</code>、<code>SOFFSET</code>：查询出来的列不确定，功能不清晰，因此不支持。</li><li><code>LAST</code>查询、<code>GROUP BY TAGS</code>、<code>DISABLE ALIGN</code>：表结构和写入结构不一致，因此不支持。</li></ul><h3 id="其他要注意的点" tabindex="-1"><a class="header-anchor" href="#其他要注意的点"><span>其他要注意的点</span></a></h3><ul><li>对于一般的聚合查询，时间戳是无意义的，约定使用 0 来存储。</li><li>当目标序列存在时，需要保证源序列和目标时间序列的数据类型、压缩和编码方式、是否属于对齐设备等元数据信息一致。</li><li>当目标序列不存在时，系统将自动创建目标序列（包括 database）。</li><li>当查询的序列不存在或查询的序列不存在数据，则不会自动创建目标序列。</li></ul><h2 id="应用举例" tabindex="-1"><a class="header-anchor" href="#应用举例"><span>应用举例</span></a></h2><h3 id="实现-iotdb-内部-etl" tabindex="-1"><a class="header-anchor" href="#实现-iotdb-内部-etl"><span>实现 IoTDB 内部 ETL</span></a></h3><p>对原始数据进行 ETL 处理后写入新序列。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> preprocess_udf</span><span style="color:#ABB2BF;">(*) </span><span style="color:#98C379;">INTO</span><span style="color:#98C379;"> ::</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">preprocessed_$</span><span style="color:#98C379;">{3}</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg.</span><span style="color:#E5C07B;">*</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|                  </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|          </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">preprocess_udf(root.sg.d1.s1</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d1.preprocessed_s1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">8000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">preprocess_udf(root.sg.d1.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d1.preprocessed_s1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">preprocess_udf(root.sg.d2.s1</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d2.preprocessed_s1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">11000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|  </span><span style="color:#61AFEF;">preprocess_udf(root.sg.d2.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.d2.preprocessed_s1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">9000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+-------------------------------+---------------------------+--------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句使用自定义函数对数据进行预处理，将预处理后的结果持久化存储到新序列中。</p><h3 id="查询结果存储" tabindex="-1"><a class="header-anchor" href="#查询结果存储"><span>查询结果存储</span></a></h3><p>将查询结果进行持久化存储，起到类似物化视图的作用。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> last_value</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">INTO</span><span style="color:#98C379;"> root.sg.agg_</span><span style="color:#E06C75;font-style:italic;">\${2}</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">count_s1,</span><span style="color:#98C379;"> last_value_s1</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg1.d1</span><span style="color:#98C379;"> GROUP</span><span style="color:#98C379;"> BY</span><span style="color:#ABB2BF;"> ([0, </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">), 10ms);</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|            </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|      </span><span style="color:#61AFEF;">count(root.sg.d1.s1</span><span style="color:#ABB2BF;">)|      </span><span style="color:#61AFEF;">root.sg.agg_d1.count_s1</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">1000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">last_value(root.sg.d1.s2</span><span style="color:#ABB2BF;">)| </span><span style="color:#61AFEF;">root.sg.agg_d1.last_value_s2</span><span style="color:#ABB2BF;">|    </span><span style="color:#61AFEF;">1000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+-----------------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.115s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句将降采样查询的结果持久化存储到新序列中。</p><h3 id="非对齐序列转对齐序列" tabindex="-1"><a class="header-anchor" href="#非对齐序列转对齐序列"><span>非对齐序列转对齐序列</span></a></h3><p>对齐序列从 0.13 版本开始支持，可以通过该功能将非对齐序列的数据写入新的对齐序列中。</p><p><strong>注意：</strong> 建议配合使用 <code>LIMIT &amp; OFFSET</code> 子句或 <code>WHERE</code> 子句（时间过滤条件）对数据进行分批，防止单次操作的数据量过大。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IOTDB</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">SELECT</span><span style="color:#98C379;"> s1,</span><span style="color:#98C379;"> s2</span><span style="color:#98C379;"> INTO</span><span style="color:#98C379;"> ALIGNED</span><span style="color:#98C379;"> root.sg1.aligned_d</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">s1,</span><span style="color:#98C379;"> s2</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">FROM</span><span style="color:#98C379;"> root.sg1.non_aligned_d</span><span style="color:#98C379;"> WHERE</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &gt;</span><span style="color:#98C379;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> and</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|             </span><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> column</span><span style="color:#ABB2BF;">|     </span><span style="color:#61AFEF;">target</span><span style="color:#98C379;"> timeseries</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">written</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.non_aligned_d.s1</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.aligned_d.s1</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.non_aligned_d.s2</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">root.sg1.aligned_d.s2</span><span style="color:#ABB2BF;">|   </span><span style="color:#61AFEF;">10000</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------------+--------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.375s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上语句将一组非对齐的序列的数据迁移到一组对齐序列。</p><h2 id="相关用户权限" tabindex="-1"><a class="header-anchor" href="#相关用户权限"><span>相关用户权限</span></a></h2><p>用户必须有下列权限才能正常执行查询写回语句：</p><ul><li>所有 <code>SELECT</code> 子句中源序列的 <code>READ_TIMESERIES</code> 权限。</li><li>所有 <code>INTO</code> 子句中目标序列 <code>INSERT_TIMESERIES</code> 权限。</li></ul>`,99)),p("p",null,[s[1]||(s[1]=n("更多用户权限相关的内容，请参考")),t(l,{to:"/zh/UserGuide/V1.0.x/Administration-Management/Administration.html"},{default:r(()=>s[0]||(s[0]=[n("权限管理语句")])),_:1}),s[2]||(s[2]=n("。"))]),s[4]||(s[4]=a('<h2 id="相关配置参数" tabindex="-1"><a class="header-anchor" href="#相关配置参数"><span>相关配置参数</span></a></h2><ul><li><p><code>select_into_insert_tablet_plan_row_limit</code></p><table><thead><tr><th>参数名</th><th>select_into_insert_tablet_plan_row_limit</th></tr></thead><tbody><tr><td>描述</td><td>写入过程中每一批 <code>Tablet</code> 的最大行数</td></tr><tr><td>类型</td><td>int32</td></tr><tr><td>默认值</td><td>10000</td></tr><tr><td>改后生效方式</td><td>重启后生效</td></tr></tbody></table></li></ul>',2))])}const A=o(d,[["render",B],["__file","Select-Into.html.vue"]]),u=JSON.parse('{"path":"/zh/UserGuide/V1.0.x/Query-Data/Select-Into.html","title":"查询写回（SELECT INTO）","lang":"zh-CN","frontmatter":{"description":"查询写回（SELECT INTO） SELECT INTO 语句用于将查询结果写入一系列指定的时间序列中。 应用场景如下： 实现 IoTDB 内部 ETL：对原始数据进行 ETL 处理后写入新序列。 查询结果存储：将查询结果进行持久化存储，起到类似物化视图的作用。 非对齐序列转对齐序列：对齐序列从0.13版本开始支持，可以通过该功能将非对齐序列的数据写...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/V1.0.x/Query-Data/Select-Into.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/V1.0.x/Query-Data/Select-Into.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"查询写回（SELECT INTO）"}],["meta",{"property":"og:description","content":"查询写回（SELECT INTO） SELECT INTO 语句用于将查询结果写入一系列指定的时间序列中。 应用场景如下： 实现 IoTDB 内部 ETL：对原始数据进行 ETL 处理后写入新序列。 查询结果存储：将查询结果进行持久化存储，起到类似物化视图的作用。 非对齐序列转对齐序列：对齐序列从0.13版本开始支持，可以通过该功能将非对齐序列的数据写..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"查询写回（SELECT INTO）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"语法定义","slug":"语法定义","link":"#语法定义","children":[{"level":3,"title":"整体描述","slug":"整体描述","link":"#整体描述","children":[]},{"level":3,"title":"INTO 子句","slug":"into-子句","link":"#into-子句","children":[]},{"level":3,"title":"使用变量占位符","slug":"使用变量占位符","link":"#使用变量占位符","children":[]},{"level":3,"title":"指定目标序列为对齐序列","slug":"指定目标序列为对齐序列","link":"#指定目标序列为对齐序列","children":[]},{"level":3,"title":"不支持使用的查询子句","slug":"不支持使用的查询子句","link":"#不支持使用的查询子句","children":[]},{"level":3,"title":"其他要注意的点","slug":"其他要注意的点","link":"#其他要注意的点","children":[]}]},{"level":2,"title":"应用举例","slug":"应用举例","link":"#应用举例","children":[{"level":3,"title":"实现 IoTDB 内部 ETL","slug":"实现-iotdb-内部-etl","link":"#实现-iotdb-内部-etl","children":[]},{"level":3,"title":"查询结果存储","slug":"查询结果存储","link":"#查询结果存储","children":[]},{"level":3,"title":"非对齐序列转对齐序列","slug":"非对齐序列转对齐序列","link":"#非对齐序列转对齐序列","children":[]}]},{"level":2,"title":"相关用户权限","slug":"相关用户权限","link":"#相关用户权限","children":[]},{"level":2,"title":"相关配置参数","slug":"相关配置参数","link":"#相关配置参数","children":[]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","username":"CritasWang","email":"critas@outlook.com","commits":1,"url":"https://github.com/CritasWang"}]},"readingTime":{"minutes":10.2,"words":3060},"filePathRelative":"zh/UserGuide/V1.0.x/Query-Data/Select-Into.md","localizedDate":"2023年7月10日","autoDesc":true}');export{A as comp,u as data};

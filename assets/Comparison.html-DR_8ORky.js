import{_ as a,c as e,b as n,o as l}from"./app-DKm3Arfd.js";const o={};function t(p,s){return l(),e("div",null,s[0]||(s[0]=[n(`<h1 id="comparison-operators-and-functions" tabindex="-1"><a class="header-anchor" href="#comparison-operators-and-functions"><span>Comparison Operators and Functions</span></a></h1><h2 id="basic-comparison-operators" tabindex="-1"><a class="header-anchor" href="#basic-comparison-operators"><span>Basic comparison operators</span></a></h2><p>Supported operators <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code> (or <code>&lt;&gt;</code> )</p><p>Supported input data types: <code>INT32</code>, <code>INT64</code>, <code>FLOAT</code> and <code>DOUBLE</code></p><p>Note: It will transform all type to <code>DOUBLE</code> then do computation.</p><p>Output data type: <code>BOOLEAN</code></p><p><strong>Example:</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> a, b, a </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">, a </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> b, !(a </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> b), a </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;"> &amp;&amp; a </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">test</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select a, b, a &gt; 10, a &lt;= b, !(a &lt;= b), a &gt; 10 &amp;&amp; a &gt; b from root.test;</span></span>
<span class="line"><span>+-----------------------------+-----------+-----------+----------------+--------------------------+---------------------------+------------------------------------------------+</span></span>
<span class="line"><span>|                         Time|root.test.a|root.test.b|root.test.a &gt; 10|root.test.a &lt;= root.test.b|!root.test.a &lt;= root.test.b|(root.test.a &gt; 10) &amp; (root.test.a &gt; root.test.b)|</span></span>
<span class="line"><span>+-----------------------------+-----------+-----------+----------------+--------------------------+---------------------------+------------------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|         23|       10.0|            true|                     false|                       true|                                            true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|         33|       21.0|            true|                     false|                       true|                                            true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|         13|       15.0|            true|                      true|                      false|                                           false|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.005+08:00|         26|        0.0|            true|                     false|                       true|                                            true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.008+08:00|          1|       22.0|           false|                      true|                      false|                                           false|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.010+08:00|         23|       12.0|            true|                     false|                       true|                                            true|</span></span>
<span class="line"><span>+-----------------------------+-----------+-----------+----------------+--------------------------+---------------------------+------------------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="between-and-operator" tabindex="-1"><a class="header-anchor" href="#between-and-operator"><span><code>BETWEEN ... AND ...</code> operator</span></a></h2><table><thead><tr><th>operator</th><th>meaning</th></tr></thead><tbody><tr><td><code>BETWEEN ... AND ...</code></td><td>within the specified range</td></tr><tr><td><code>NOT BETWEEN ... AND ...</code></td><td>Not within the specified range</td></tr></tbody></table><p><strong>Example:</strong> Select data within or outside the interval [36.5,40]:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">between</span><span style="color:#D19A66;"> 36</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#C678DD;"> and</span><span style="color:#D19A66;"> 40</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">not</span><span style="color:#C678DD;"> between</span><span style="color:#D19A66;"> 36</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5</span><span style="color:#C678DD;"> and</span><span style="color:#D19A66;"> 40</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="fuzzy-matching-operator" tabindex="-1"><a class="header-anchor" href="#fuzzy-matching-operator"><span>Fuzzy matching operator</span></a></h2><p>For TEXT type data, support fuzzy matching of data using <code>Like</code> and <code>Regexp</code> operators.</p><table><thead><tr><th>operator</th><th>meaning</th></tr></thead><tbody><tr><td><code>LIKE</code></td><td>matches simple patterns</td></tr><tr><td><code>NOT LIKE</code></td><td>cannot match simple pattern</td></tr><tr><td><code>REGEXP</code></td><td>Match regular expression</td></tr><tr><td><code>NOT REGEXP</code></td><td>Cannot match regular expression</td></tr></tbody></table><p>Input data type: <code>TEXT</code></p><p>Return type: <code>BOOLEAN</code></p><h3 id="use-like-for-fuzzy-matching" tabindex="-1"><a class="header-anchor" href="#use-like-for-fuzzy-matching"><span>Use <code>Like</code> for fuzzy matching</span></a></h3><p><strong>Matching rules:</strong></p><ul><li><code>%</code> means any 0 or more characters.</li><li><code>_</code> means any single character.</li></ul><p><strong>Example 1:</strong> Query the data under <code>root.sg.d1</code> that contains <code>&#39;cc&#39;</code> in <code>value</code>.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> like</span><span style="color:#98C379;"> &#39;%cc%&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:00.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">aabbccdd</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:01.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">cc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2:</strong> Query the data under <code>root.sg.d1</code> with <code>&#39;b&#39;</code> in the middle of <code>value</code> and any single character before and after.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.device</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> like</span><span style="color:#98C379;"> &#39;_b_&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:02.000+08:00</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">abc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-regexp-for-fuzzy-matching" tabindex="-1"><a class="header-anchor" href="#use-regexp-for-fuzzy-matching"><span>Use <code>Regexp</code> for fuzzy matching</span></a></h3><p>The filter condition that needs to be passed in is <strong>Java standard library style regular expression</strong>.</p><p><strong>Common regular matching examples:</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>All characters with a length of 3-20: ^.{3,20}$</span></span>
<span class="line"><span>Uppercase English characters: ^[A-Z]+$</span></span>
<span class="line"><span>Numbers and English characters: ^[A-Za-z0-9]+$</span></span>
<span class="line"><span>Starting with a: ^a.*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 1:</strong> Query the string of 26 English characters for value under root.sg.d1.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> regexp</span><span style="color:#98C379;"> &#39;^[A-Za-z]+$&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:00.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">aabbccdd</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:01.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">cc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 2:</strong> Query root.sg.d1 where the value is a string consisting of 26 lowercase English characters and the time is greater than 100.</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">IoTDB</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">select</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> root.sg.d1</span><span style="color:#98C379;"> where</span><span style="color:#98C379;"> value</span><span style="color:#98C379;"> regexp</span><span style="color:#98C379;"> &#39;^[a-z]+$&#39;</span><span style="color:#98C379;"> and</span><span style="color:#98C379;"> time</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">Time</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">root.sg.d1.value</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:00.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">aabbccdd</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">2017-11-01T00:00:01.000+08:00</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">cc</span><span style="color:#ABB2BF;">|</span></span>
<span class="line"><span style="color:#61AFEF;">+--------------------------+----------------+</span></span>
<span class="line"><span style="color:#61AFEF;">Total</span><span style="color:#98C379;"> line</span><span style="color:#98C379;"> number</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">It</span><span style="color:#98C379;"> costs</span><span style="color:#98C379;"> 0.002s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example 3:</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> b, b </span><span style="color:#C678DD;">like</span><span style="color:#98C379;"> &#39;1%&#39;</span><span style="color:#ABB2BF;">, b regexp </span><span style="color:#98C379;">&#39;[0-2]&#39;</span><span style="color:#C678DD;"> from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">test</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>operation result</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------+------- ------------------+--------------------------+</span></span>
<span class="line"><span>| Time|root.test.b|root.test.b LIKE &#39;^1.*?$&#39;|root.test.b REGEXP &#39;[0-2]&#39;|</span></span>
<span class="line"><span>+-----------------------------+-----------+------- ------------------+--------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00| 111test111| true| true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00| 333test333| false| false|</span></span>
<span class="line"><span>+-----------------------------+-----------+------- ------------------+--------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="is-null-operator" tabindex="-1"><a class="header-anchor" href="#is-null-operator"><span><code>IS NULL</code> operator</span></a></h2><table><thead><tr><th>operator</th><th>meaning</th></tr></thead><tbody><tr><td><code>IS NULL</code></td><td>is a null value</td></tr><tr><td><code>IS NOT NULL</code></td><td>is not a null value</td></tr></tbody></table><p><strong>Example 1:</strong> Select data with empty values:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">is</span><span style="color:#C678DD;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Example 2:</strong> Select data with non-null values:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> temperature </span><span style="color:#C678DD;">is not null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="in-operator" tabindex="-1"><a class="header-anchor" href="#in-operator"><span><code>IN</code> operator</span></a></h2><table><thead><tr><th>operator</th><th>meaning</th></tr></thead><tbody><tr><td><code>IN</code> / <code>CONTAINS</code></td><td>are the values ​​in the specified list</td></tr><tr><td><code>NOT IN</code> / <code>NOT CONTAINS</code></td><td>not a value in the specified list</td></tr></tbody></table><p>Input data type: <code>All Types</code></p><p>return type <code>BOOLEAN</code></p><p>**Note: Please ensure that the values ​​in the collection can be converted to the type of the input data. **</p><blockquote><p>For example:</p><p><code>s1 in (1, 2, 3, &#39;test&#39;)</code>, the data type of <code>s1</code> is <code>INT32</code></p><p>We will throw an exception because <code>&#39;test&#39;</code> cannot be converted to type <code>INT32</code></p></blockquote><p><strong>Example 1:</strong> Select data with values ​​within a certain range:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;200&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;300&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;400&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;500&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Example 2:</strong> Select data with values ​​outside a certain range:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg1</span><span style="color:#ABB2BF;">.d1 </span><span style="color:#C678DD;">where</span><span style="color:#ABB2BF;"> code </span><span style="color:#C678DD;">not</span><span style="color:#C678DD;"> in</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&#39;200&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;300&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;400&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;500&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Example 3:</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> a, a </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">test</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Output 2:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+-----------+------- -------------+</span></span>
<span class="line"><span>| Time|root.test.a|root.test.a IN (1,2)|</span></span>
<span class="line"><span>+-----------------------------+-----------+------- -------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00| 1| true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00| 3| false|</span></span>
<span class="line"><span>+-----------------------------+-----------+------- -------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="condition-functions" tabindex="-1"><a class="header-anchor" href="#condition-functions"><span>Condition Functions</span></a></h2><p>Condition functions are used to check whether timeseries data points satisfy some specific condition.</p><p>They return BOOLEANs.</p><p>Currently, IoTDB supports the following condition functions:</p><table><thead><tr><th>Function Name</th><th>Allowed Input Series Data Types</th><th>Required Attributes</th><th>Output Series Data Type</th><th>Series Data Type Description</th></tr></thead><tbody><tr><td>ON_OFF</td><td>INT32 / INT64 / FLOAT / DOUBLE</td><td><code>threshold</code>: a double type variate</td><td>BOOLEAN</td><td>Return <code>ts_value &gt;= threshold</code>.</td></tr><tr><td>IN_RANGR</td><td>INT32 / INT64 / FLOAT / DOUBLE</td><td><code>lower</code>: DOUBLE type<br><code>upper</code>: DOUBLE type</td><td>BOOLEAN</td><td>Return <code>ts_value &gt;= lower &amp;&amp; value &lt;= upper</code>.</td></tr></tbody></table><p>Example Data:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select ts from root.test;</span></span>
<span class="line"><span>+-----------------------------+------------+</span></span>
<span class="line"><span>|                         Time|root.test.ts|</span></span>
<span class="line"><span>+-----------------------------+------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|           1|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|           2|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|           3|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|           4|</span></span>
<span class="line"><span>+-----------------------------+------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="test-1" tabindex="-1"><a class="header-anchor" href="#test-1"><span>Test 1</span></a></h5><p>SQL:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> ts, on_off(ts, </span><span style="color:#98C379;">&#39;threshold&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">test</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Output:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select ts, on_off(ts, &#39;threshold&#39;=&#39;2&#39;) from root.test;</span></span>
<span class="line"><span>+-----------------------------+------------+-------------------------------------+</span></span>
<span class="line"><span>|                         Time|root.test.ts|on_off(root.test.ts, &quot;threshold&quot;=&quot;2&quot;)|</span></span>
<span class="line"><span>+-----------------------------+------------+-------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|           1|                                false|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|           2|                                 true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|           3|                                 true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|           4|                                 true|</span></span>
<span class="line"><span>+-----------------------------+------------+-------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="test-2" tabindex="-1"><a class="header-anchor" href="#test-2"><span>Test 2</span></a></h5><p>Sql:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">select</span><span style="color:#ABB2BF;"> ts, in_range(ts, </span><span style="color:#98C379;">&#39;lower&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;upper&#39;</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;3.1&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">from</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">test</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Output:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>IoTDB&gt; select ts, in_range(ts,&#39;lower&#39;=&#39;2&#39;, &#39;upper&#39;=&#39;3.1&#39;) from root.test;</span></span>
<span class="line"><span>+-----------------------------+------------+--------------------------------------------------+</span></span>
<span class="line"><span>|                         Time|root.test.ts|in_range(root.test.ts, &quot;lower&quot;=&quot;2&quot;, &quot;upper&quot;=&quot;3.1&quot;)|</span></span>
<span class="line"><span>+-----------------------------+------------+--------------------------------------------------+</span></span>
<span class="line"><span>|1970-01-01T08:00:00.001+08:00|           1|                                             false|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.002+08:00|           2|                                              true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.003+08:00|           3|                                              true|</span></span>
<span class="line"><span>|1970-01-01T08:00:00.004+08:00|           4|                                             false|</span></span>
<span class="line"><span>+-----------------------------+------------+--------------------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75)]))}const c=a(o,[["render",t],["__file","Comparison.html.vue"]]),i=JSON.parse('{"path":"/UserGuide/V1.0.x/Operators-Functions/Comparison.html","title":"Comparison Operators and Functions","lang":"en-US","frontmatter":{"description":"Comparison Operators and Functions Basic comparison operators Supported operators >, >=, <, <=, ==, != (or <> ) Supported input data types: INT32, INT64, FLOAT and DOUBLE Note: ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V1.0.x/Operators-Functions/Comparison.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V1.0.x/Operators-Functions/Comparison.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"Comparison Operators and Functions"}],["meta",{"property":"og:description","content":"Comparison Operators and Functions Basic comparison operators Supported operators >, >=, <, <=, ==, != (or <> ) Supported input data types: INT32, INT64, FLOAT and DOUBLE Note: ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Comparison Operators and Functions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Basic comparison operators","slug":"basic-comparison-operators","link":"#basic-comparison-operators","children":[]},{"level":2,"title":"BETWEEN ... AND ... operator","slug":"between-and-operator","link":"#between-and-operator","children":[]},{"level":2,"title":"Fuzzy matching operator","slug":"fuzzy-matching-operator","link":"#fuzzy-matching-operator","children":[{"level":3,"title":"Use Like for fuzzy matching","slug":"use-like-for-fuzzy-matching","link":"#use-like-for-fuzzy-matching","children":[]},{"level":3,"title":"Use Regexp for fuzzy matching","slug":"use-regexp-for-fuzzy-matching","link":"#use-regexp-for-fuzzy-matching","children":[]}]},{"level":2,"title":"IS NULL operator","slug":"is-null-operator","link":"#is-null-operator","children":[]},{"level":2,"title":"IN operator","slug":"in-operator","link":"#in-operator","children":[]},{"level":2,"title":"Condition Functions","slug":"condition-functions","link":"#condition-functions","children":[]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","username":"CritasWang","email":"critas@outlook.com","commits":1,"url":"https://github.com/CritasWang"}]},"readingTime":{"minutes":3.9,"words":1171},"filePathRelative":"UserGuide/V1.0.x/Operators-Functions/Comparison.md","localizedDate":"July 10, 2023","autoDesc":true}');export{c as comp,i as data};

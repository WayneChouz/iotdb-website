(window.webpackJsonp=window.webpackJsonp||[]).push([[739],{1137:function(t,s,v){"use strict";v.r(s);var _=v(29),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"putiotdb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putiotdb"}},[t._v("#")]),t._v(" PutIoTDB")]),t._v(" "),s("h3",{attrs:{id:"putiotdb的配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putiotdb的配置项"}},[t._v("#")]),t._v(" PutIoTDB的配置项")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("配置项")]),t._v(" "),s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("默认值")]),t._v(" "),s("th",[t._v("是否必填")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Host")]),t._v(" "),s("td",[t._v("IoTDB 的主机名")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("Port")]),t._v(" "),s("td",[t._v("IoTDB 的端口")]),t._v(" "),s("td",[t._v("6667")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("Username")]),t._v(" "),s("td",[t._v("IoTDB 的用户名")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("Password")]),t._v(" "),s("td",[t._v("IoTDB 的密码")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("Record Reader")]),t._v(" "),s("td",[t._v("指定一个 Record Reader controller service 来解析数据，并且推断数据格式。")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("Schema")]),t._v(" "),s("td",[t._v("IoTDB 需要的 schema 不能很好的被 NiFi 支持，因此你可以在这里自定义 schema。"),s("br"),t._v("除此之外，你可以通过这个方式设置编码和压缩类型。如果你没有设置这个配置，就会使用 Record Reader 推断的 schema。"),s("br"),t._v("这个配置可以通过 Attributes 的表达式来更新。")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("Aligned")]),t._v(" "),s("td",[t._v("是否使用 aligned 接口？"),s("br"),t._v("这个配置可以通过 Attributes 的表达式来更新。")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("MaxRowNumber")]),t._v(" "),s("td",[t._v("指定 tablet 的最大行数。"),s("br"),t._v("这个配置可以通过 Attributes 的表达式来更新。")]),t._v(" "),s("td",[t._v("1024")]),t._v(" "),s("td",[t._v("false")])])])]),t._v(" "),s("h3",{attrs:{id:"flowfile-的推断数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flowfile-的推断数据类型"}},[t._v("#")]),t._v(" Flowfile 的推断数据类型")]),t._v(" "),s("p",[t._v("如果要使用推断类型，需要注意以下几点：")]),t._v(" "),s("ol",[s("li",[t._v("输入的 flowfile 需要能被 "),s("code",[t._v("Record Reader")]),t._v(" 读取。")]),t._v(" "),s("li",[t._v("flowfile的 schema 中必须包含 "),s("code",[t._v("Time")]),t._v(" 列，而且 "),s("code",[t._v("Time")]),t._v(" 列必须是第一列。")]),t._v(" "),s("li",[s("code",[t._v("Time")]),t._v("的数据类型只能是 "),s("code",[t._v("STRING")]),t._v("  或者  "),s("code",[t._v("LONG")]),t._v("。")]),t._v(" "),s("li",[t._v("除"),s("code",[t._v("Time")]),t._v(" 以外的列必须以 "),s("code",[t._v("root.")]),t._v(" 开头。")]),t._v(" "),s("li",[t._v("支持的数据类型有： "),s("code",[t._v("INT")]),t._v("，"),s("code",[t._v("LONG")]),t._v("， "),s("code",[t._v("FLOAT")]),t._v("， "),s("code",[t._v("DOUBLE")]),t._v("， "),s("code",[t._v("BOOLEAN")]),t._v("， "),s("code",[t._v("TEXT")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"通过配置项自定义-schema"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过配置项自定义-schema"}},[t._v("#")]),t._v(" 通过配置项自定义 schema")]),t._v(" "),s("p",[t._v("如上所述，通过配置项来自定义 schema 比起推断的 schema来说，是一种更加灵活和强大的方式。")]),t._v(" "),s("p",[s("code",[t._v("Schema")]),t._v(" 配置项的解构如下:")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"timeType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LONG"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"fields"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tsName"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root.sg.d1.s1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dataType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"INT32"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"encoding"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RLE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compressionType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GZIP"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tsName"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"root.sg.d1.s2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dataType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"INT64"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"encoding"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RLE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compressionType"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GZIP"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[s("strong",[t._v("注意")])]),t._v(" "),s("ol",[s("li",[t._v("flowfile 的第一列数据必须为 "),s("code",[t._v("Time")]),t._v("。剩下的必须与 "),s("code",[t._v("fields")]),t._v(" 配置中保持一样的顺序。")]),t._v(" "),s("li",[t._v("定义 shema 的 JSON 中必须包含 "),s("code",[t._v("timeType")]),t._v(" and "),s("code",[t._v("fields")]),t._v(" 这两项。")]),t._v(" "),s("li",[s("code",[t._v("timeType")]),t._v(" 只支持 "),s("code",[t._v("LONG")]),t._v(" 和 "),s("code",[t._v("STRING")]),t._v(" 这两个选项。")]),t._v(" "),s("li",[s("code",[t._v("tsName")]),t._v(" 和 "),s("code",[t._v("dataType")]),t._v(" 这两项必须被设置。")]),t._v(" "),s("li",[s("code",[t._v("tsName")]),t._v(" 必须以 "),s("code",[t._v("root.")]),t._v(" 开头。")]),t._v(" "),s("li",[t._v("支持的 "),s("code",[t._v("dataTypes")]),t._v(" 有："),s("code",[t._v("INT32")]),t._v("， "),s("code",[t._v("INT64")]),t._v("， "),s("code",[t._v("FLOAT")]),t._v("， "),s("code",[t._v("DOUBLE")]),t._v("， "),s("code",[t._v("BOOLEAN")]),t._v("， "),s("code",[t._v("TEXT")]),t._v("。")]),t._v(" "),s("li",[t._v("支持的 "),s("code",[t._v("encoding")]),t._v(" 有： "),s("code",[t._v("PLAIN")]),t._v("， "),s("code",[t._v("DICTIONARY")]),t._v("， "),s("code",[t._v("RLE")]),t._v("， "),s("code",[t._v("DIFF")]),t._v("， "),s("code",[t._v("TS_2DIFF")]),t._v("， "),s("code",[t._v("BITMAP")]),t._v("， "),s("code",[t._v("GORILLA_V1")]),t._v("， "),s("code",[t._v("REGULAR")]),t._v("， "),s("code",[t._v("GORILLA")]),t._v("。")]),t._v(" "),s("li",[t._v("支持的 "),s("code",[t._v("compressionType")]),t._v(" 有： "),s("code",[t._v("UNCOMPRESSED")]),t._v("， "),s("code",[t._v("SNAPPY")]),t._v("， "),s("code",[t._v("GZIP")]),t._v("， "),s("code",[t._v("LZO")]),t._v("， "),s("code",[t._v("SDT")]),t._v("， "),s("code",[t._v("PAA")]),t._v("， "),s("code",[t._v("PLA")]),t._v("， "),s("code",[t._v("LZ4")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"relationships"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relationships"}},[t._v("#")]),t._v(" Relationships")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("relationship")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("success")]),t._v(" "),s("td",[t._v("数据能被正确的写入。")])]),t._v(" "),s("tr",[s("td",[t._v("failure")]),t._v(" "),s("td",[t._v("schema 或者数据有异常。")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
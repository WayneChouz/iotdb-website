(window.webpackJsonp=window.webpackJsonp||[]).push([[650],{1056:function(_,v,e){"use strict";e.r(v);var t=e(19),s=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"编码方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编码方式"}},[_._v("#")]),_._v(" 编码方式")]),_._v(" "),v("h2",{attrs:{id:"基本编码方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本编码方式"}},[_._v("#")]),_._v(" 基本编码方式")]),_._v(" "),v("p",[_._v("为了提高数据的存储效率，需要在数据写入的过程中对数据进行编码，从而减少磁盘空间的使用量。在写数据以及读数据的过程中都能够减少 I/O 操作的数据量从而提高性能。IoTDB 支持多种针对不同类型的数据的编码方法：")]),_._v(" "),v("ul",[v("li",[_._v("PLAIN 编码（PLAIN）")])]),_._v(" "),v("p",[_._v("PLAIN 编码，默认的编码方式，即不编码，支持多种数据类型，压缩和解压缩的时间效率较高，但空间存储效率较低。")]),_._v(" "),v("ul",[v("li",[_._v("二阶差分编码（TS_2DIFF）")])]),_._v(" "),v("p",[_._v("二阶差分编码，比较适合编码单调递增或者递减的序列数据，不适合编码波动较大的数据。")]),_._v(" "),v("ul",[v("li",[_._v("游程编码（RLE）")])]),_._v(" "),v("p",[_._v("游程编码，比较适合存储某些数值连续出现的序列，不适合编码大部分情况下前后值不一样的序列数据。")]),_._v(" "),v("p",[_._v("游程编码也可用于对浮点数进行编码，但在创建时间序列的时候需指定保留小数位数（MAX_POINT_NUMBER，具体指定方式参见本文 "),v("RouterLink",{attrs:{to:"/zh/UserGuide/Master/Reference/SQL-Reference.html"}},[_._v("SQL 参考文档")]),_._v("）。比较适合存储某些浮点数值连续出现的序列数据，不适合存储对小数点后精度要求较高以及前后波动较大的序列数据。")],1),_._v(" "),v("blockquote",[v("p",[_._v("游程编码（RLE）和二阶差分编码（TS_2DIFF）对 float 和 double 的编码是有精度限制的，默认保留 2 位小数。推荐使用 GORILLA。")])]),_._v(" "),v("ul",[v("li",[_._v("GORILLA 编码（GORILLA）")])]),_._v(" "),v("p",[_._v("GORILLA 编码是一种无损编码，它比较适合编码前后值比较接近的数值序列，不适合编码前后波动较大的数据。")]),_._v(" "),v("p",[_._v("当前系统中存在两个版本的 GORILLA 编码实现，推荐使用"),v("code",[_._v("GORILLA")]),_._v("，不推荐使用"),v("code",[_._v("GORILLA_V1")]),_._v("（已过时）。")]),_._v(" "),v("p",[_._v("使用限制：使用 Gorilla 编码 INT32 数据时，需要保证序列中不存在值为"),v("code",[_._v("Integer.MIN_VALUE")]),_._v("的数据点；使用 Gorilla 编码 INT64 数据时，需要保证序列中不存在值为"),v("code",[_._v("Long.MIN_VALUE")]),_._v("的数据点。")]),_._v(" "),v("ul",[v("li",[_._v("字典编码 （DICTIONARY）")])]),_._v(" "),v("p",[_._v("字典编码是一种无损编码。它适合编码基数小的数据（即数据去重后唯一值数量小）。不推荐用于基数大的数据。")]),_._v(" "),v("ul",[v("li",[_._v("频域编码 （FREQ）")])]),_._v(" "),v("p",[_._v("频域编码是一种有损编码，它将时序数据变换为频域，仅保留部分高能量的频域分量。该编码适合于具有明显周期性的数据。")]),_._v(" "),v("blockquote",[v("p",[_._v("频域编码在配置文件中包括两个参数："),v("code",[_._v("freq_snr")]),_._v("指定了编码的信噪比，该参数增大会同时降低压缩比和精度损失；"),v("code",[_._v("freq_block_size")]),_._v("指定了编码进行时频域变换的分组大小，推荐不对默认值进行修改。参数影响的实验结果和分析详见设计文档。")])]),_._v(" "),v("ul",[v("li",[_._v("ZIGZAG 编码")])]),_._v(" "),v("p",[_._v("ZigZag编码将有符号整型映射到无符号整型，适合比较小的整数。")]),_._v(" "),v("h2",{attrs:{id:"数据类型与编码的对应关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据类型与编码的对应关系"}},[_._v("#")]),_._v(" 数据类型与编码的对应关系")]),_._v(" "),v("p",[_._v("前文介绍的五种编码适用于不同的数据类型，若对应关系错误，则无法正确创建时间序列。数据类型与支持其编码的编码方式对应关系总结如下表所示。")]),_._v(" "),v("p",[_._v("| 数据类型 | 支持的编码                                  |\n|-:-:------|-:-:-----------------------------------------|\n| BOOLEAN  | PLAIN, RLE                                  |\n| INT32    | PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, ZIGZAG |\n| INT64    | PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, ZIGZAG |\n| FLOAT    | PLAIN, RLE, TS_2DIFF, GORILLA, FREQ         |\n| DOUBLE   | PLAIN, RLE, TS_2DIFF, GORILLA, FREQ         |\n| TEXT     | PLAIN, DICTIONARY                           |")]),_._v(" "),v("p",[_._v("当用户输入的数据类型与编码方式不对应时，系统会提示错误。如下所示，二阶差分编码不支持布尔类型：")]),_._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("IoTDB> create timeseries root.ln.wf02.wt02.status WITH DATATYPE=BOOLEAN, ENCODING=TS_2DIFF\nMsg: 507: encoding TS_2DIFF does not support BOOLEAN\n")])]),_._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[_._v("1")]),v("br"),v("span",{staticClass:"line-number"},[_._v("2")]),v("br")])])])}),[],!1,null,null,null);v.default=s.exports}}]);
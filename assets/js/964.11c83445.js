(window.webpackJsonp=window.webpackJsonp||[]).push([[964],{1373:function(a,e,t){"use strict";t.r(e);var o=t(19),d=Object(o.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"分布式部署-faq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式部署-faq"}},[a._v("#")]),a._v(" 分布式部署 FAQ")]),a._v(" "),e("h2",{attrs:{id:"一、集群启停"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、集群启停"}},[a._v("#")]),a._v(" 一、集群启停")]),a._v(" "),e("h3",{attrs:{id:"_1-confignode初次启动失败-如何排查原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-confignode初次启动失败-如何排查原因"}},[a._v("#")]),a._v(" 1. ConfigNode初次启动失败，如何排查原因？")]),a._v(" "),e("ul",[e("li",[a._v("ConfigNode初次启动时确保已清空data/confignode目录")]),a._v(" "),e("li",[a._v("确保该ConfigNode使用到的<IP+端口>没有被占用，没有与已启动的ConfigNode使用到的<IP+端口>冲突")]),a._v(" "),e("li",[a._v("确保该ConfigNode的cn_target_confignode_list（指向存活的ConfigNode；如果该ConfigNode是启动的第一个ConfigNode，该值指向自身）配置正确")]),a._v(" "),e("li",[a._v("确保该ConfigNode的配置项（共识协议、副本数等）等与cn_target_confignode_list对应的ConfigNode集群一致")])]),a._v(" "),e("h3",{attrs:{id:"_2-confignode初次启动成功-show-cluster的结果里为何没有该节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-confignode初次启动成功-show-cluster的结果里为何没有该节点"}},[a._v("#")]),a._v(" 2. ConfigNode初次启动成功，show cluster的结果里为何没有该节点？")]),a._v(" "),e("ul",[e("li",[a._v("检查cn_target_confignode_list是否正确指向了正确的地址； 如果cn_target_confignode_list指向了自身，则会启动一个新的ConfigNode集群")])]),a._v(" "),e("h3",{attrs:{id:"_3-datanode初次启动失败-如何排查原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-datanode初次启动失败-如何排查原因"}},[a._v("#")]),a._v(" 3. DataNode初次启动失败，如何排查原因？")]),a._v(" "),e("ul",[e("li",[a._v("DataNode初次启动时确保已清空data/datanode目录。 如果启动结果为“Reject DataNode restart.”则表示启动时可能没有清空data/datanode目录")]),a._v(" "),e("li",[a._v("确保该DataNode使用到的<IP+端口>没有被占用，没有与已启动的DataNode使用到的<IP+端口>冲突")]),a._v(" "),e("li",[a._v("确保该DataNode的dn_target_confignode_list指向存活的ConfigNode")])]),a._v(" "),e("h3",{attrs:{id:"_4-移除datanode执行失败-如何排查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-移除datanode执行失败-如何排查"}},[a._v("#")]),a._v(" 4. 移除DataNode执行失败，如何排查？")]),a._v(" "),e("ul",[e("li",[a._v("检查remove-datanode脚本的参数是否正确，是否传入了正确的ip:port或正确的dataNodeId")]),a._v(" "),e("li",[a._v("只有集群可用节点数量 > max(元数据副本数量, 数据副本数量)时，移除操作才允许被执行")]),a._v(" "),e("li",[a._v("执行移除DataNode的过程会将该DataNode上的数据迁移到其他存活的DataNode，数据迁移以Region为粒度，如果某个Region迁移失败，则被移除的DataNode会一直处于Removing状态")]),a._v(" "),e("li",[a._v("补充：处于Removing状态的节点，其节点上的Region也是Removing或Unknown状态，即不可用状态。 该Remvoing状态的节点也不会接受客户端的请求。\n如果要使Removing状态的节点变为可用，用户可以使用set system status to running 命令将该节点设置为Running状态；\n如果要使迁移失败的Region处于可用状态，可以使用migrate region from datanodeId1 to datanodeId2 命令将该不可用的Region迁移到其他存活的节点。\n另外IoTDB后续也会提供remove-datanode.sh -f命令，来强制移除节点（迁移失败的Region会直接丢弃）")])]),a._v(" "),e("h3",{attrs:{id:"_5-挂掉的datanode是否支持移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-挂掉的datanode是否支持移除"}},[a._v("#")]),a._v(" 5. 挂掉的DataNode是否支持移除？")]),a._v(" "),e("ul",[e("li",[a._v("当前集群副本数量大于1时可以移除。 如果集群副本数量等于1，则不支持移除。 在下个版本会推出强制移除的命令")])]),a._v(" "),e("h3",{attrs:{id:"_6-从0-13升级到1-0需要注意什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-从0-13升级到1-0需要注意什么"}},[a._v("#")]),a._v(" 6. 从0.13升级到1.0需要注意什么？")]),a._v(" "),e("ul",[e("li",[a._v("0.13版本与1.0版本的文件目录结构是不同的，不能将0.13的data目录直接拷贝到1.0集群使用。如果需要将0.13的数据导入至1.0，可以使用LOAD功能")]),a._v(" "),e("li",[a._v("0.13版本的默认RPC地址是0.0.0.0，1.0版本的默认RPC地址是127.0.0.1")])]),a._v(" "),e("h2",{attrs:{id:"二、集群重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、集群重启"}},[a._v("#")]),a._v(" 二、集群重启")]),a._v(" "),e("h3",{attrs:{id:"_1-如何重启集群中的某个confignode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何重启集群中的某个confignode"}},[a._v("#")]),a._v(" 1. 如何重启集群中的某个ConfigNode？")]),a._v(" "),e("ul",[e("li",[a._v("第一步：通过stop-confignode.sh或kill进程方式关闭ConfigNode进程")]),a._v(" "),e("li",[a._v("第二步：通过执行start-confignode.sh启动ConfigNode进程实现重启")]),a._v(" "),e("li",[a._v("下个版本IoTDB会提供一键重启的操作")])]),a._v(" "),e("h3",{attrs:{id:"_2-如何重启集群中的某个datanode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何重启集群中的某个datanode"}},[a._v("#")]),a._v(" 2. 如何重启集群中的某个DataNode？")]),a._v(" "),e("ul",[e("li",[a._v("第一步：通过stop-datanode.sh或kill进程方式关闭DataNode进程")]),a._v(" "),e("li",[a._v("第二步：通过执行start-datanode.sh启动DataNode进程实现重启")]),a._v(" "),e("li",[a._v("下个版本IoTDB会提供一键重启的操作")])]),a._v(" "),e("h3",{attrs:{id:"_3-将某个confignode移除后-remove-confignode-能否再利用该confignode的data目录重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-将某个confignode移除后-remove-confignode-能否再利用该confignode的data目录重启"}},[a._v("#")]),a._v(" 3. 将某个ConfigNode移除后（remove-confignode），能否再利用该ConfigNode的data目录重启？")]),a._v(" "),e("ul",[e("li",[a._v("不能。会报错：Reject ConfigNode restart. Because there are no corresponding ConfigNode(whose nodeId=xx) in the cluster.")])]),a._v(" "),e("h3",{attrs:{id:"_4-将某个datanode移除后-remove-datanode-能否再利用该datanode的data目录重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-将某个datanode移除后-remove-datanode-能否再利用该datanode的data目录重启"}},[a._v("#")]),a._v(" 4. 将某个DataNode移除后（remove-datanode），能否再利用该DataNode的data目录重启？")]),a._v(" "),e("ul",[e("li",[a._v("不能正常重启，启动结果为“Reject DataNode restart. Because there are no corresponding DataNode(whose nodeId=xx) in the cluster. Possible solutions are as follows:...”")])]),a._v(" "),e("h3",{attrs:{id:"_5-用户看到某个confignode-datanode变成了unknown状态-在没有kill对应进程的情况下-直接删除掉confignode-datanode对应的data目录-然后执行start-confignode-sh-start-datanode-sh-这种情况下能成功吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-用户看到某个confignode-datanode变成了unknown状态-在没有kill对应进程的情况下-直接删除掉confignode-datanode对应的data目录-然后执行start-confignode-sh-start-datanode-sh-这种情况下能成功吗"}},[a._v("#")]),a._v(" 5. 用户看到某个ConfigNode/DataNode变成了Unknown状态，在没有kill对应进程的情况下，直接删除掉ConfigNode/DataNode对应的data目录，然后执行start-confignode.sh/start-datanode.sh，这种情况下能成功吗?")]),a._v(" "),e("ul",[e("li",[a._v("无法启动成功，会报错端口已被占用")])]),a._v(" "),e("h2",{attrs:{id:"三、集群运维"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、集群运维"}},[a._v("#")]),a._v(" 三、集群运维")]),a._v(" "),e("h3",{attrs:{id:"_1-show-cluster执行失败-显示-please-check-server-status-如何排查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-show-cluster执行失败-显示-please-check-server-status-如何排查"}},[a._v("#")]),a._v(" 1. Show cluster执行失败，显示“please check server status”，如何排查?")]),a._v(" "),e("ul",[e("li",[a._v("确保ConfigNode集群一半以上的节点处于存活状态")]),a._v(" "),e("li",[a._v("确保客户端连接的DataNode处于存活状态")])]),a._v(" "),e("h3",{attrs:{id:"_2-某一datanode节点的磁盘文件损坏-如何修复这个节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-某一datanode节点的磁盘文件损坏-如何修复这个节点"}},[a._v("#")]),a._v(" 2. 某一DataNode节点的磁盘文件损坏，如何修复这个节点?")]),a._v(" "),e("ul",[e("li",[a._v("当前只能通过remove-datanode的方式进行实现。remove-datanode执行的过程中会将该DataNode上的数据迁移至其他存活的DataNode节点（前提是集群设置的副本数大于1）")]),a._v(" "),e("li",[a._v("下个版本IoTDB会提供一键修复节点的功能")])]),a._v(" "),e("h3",{attrs:{id:"_3-如何降低confignode、datanode使用的内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何降低confignode、datanode使用的内存"}},[a._v("#")]),a._v(" 3. 如何降低ConfigNode、DataNode使用的内存？")]),a._v(" "),e("ul",[e("li",[a._v("在conf/confignode-env.sh、conf/datanode-env.sh文件可通过调整MAX_HEAP_SIZE、MAX_DIRECT_MEMORY_SIZE等选项可以调整ConfigNode、DataNode使用的最大堆内、堆外内存")])])])}),[],!1,null,null,null);e.default=d.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{890:function(t,e,o){"use strict";o.r(e);var v=o(68),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"旋转门压缩"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#旋转门压缩"}},[t._v("#")]),t._v(" 旋转门压缩")]),t._v(" "),o("p",[t._v("旋转门压缩（SDT）算法是一种有损压缩算法。SDT的计算复杂度较低，并使用线性趋势来表示大量数据。")]),t._v(" "),o("p",[t._v("IoTDB允许您在创建时间序列时指定SDT的属性，并支持以下三个属性：")]),t._v(" "),o("ul",[o("li",[t._v("CompDev (压缩偏差)")])]),t._v(" "),o("p",[t._v("CompDev是SDT中最重要的参数，代表当前样本和当前线性之间的最大差趋势。")]),t._v(" "),o("ul",[o("li",[t._v("CompMin (最小压缩间隔)")])]),t._v(" "),o("p",[t._v("CompMin主要用于减少噪点。 CompMin测量两个存储的数据点之间的时间距离，如果当前点的时间到上一个存储的点的时间距离小于或等于compMin， 无论压缩偏差值，都不会存储当前数据点。")]),t._v(" "),o("ul",[o("li",[t._v("CompMax (最大压缩间隔)")])]),t._v(" "),o("p",[t._v("CompMax用于定期检查上一个存储的点到当前点之间的时间距离。它测量存储点之间的时间差。如果当前点时间到上一个存储点的时间距离 大于或等于compMax，无论压缩偏差值，都会存储当前数据点。")]),t._v(" "),o("p",[t._v("SDT的指定语法详见本文"),o("RouterLink",{attrs:{to:"/zh/UserGuide/Master/Operation Manual/SQL Reference.html"}},[t._v("5.4节")]),t._v("。")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);
import{_ as t,c as i,b as l,o as s}from"./app-iuyHzUCl.js";const a={};function n(r,e){return s(),i("div",null,e[0]||(e[0]=[l(`<h1 id="opc-ua-协议" tabindex="-1"><a class="header-anchor" href="#opc-ua-协议"><span>OPC UA 协议</span></a></h1><h2 id="opc-ua" tabindex="-1"><a class="header-anchor" href="#opc-ua"><span>OPC UA</span></a></h2><p>OPC UA 是一种在自动化领域用于不同设备和系统之间进行通信的技术规范，用于实现跨平台、跨语言和跨网络的操作，为工业物联网提供一个可靠和安全的数据交换基础。IoTDB 中支持 OPC UA协议， IoTDB OPC Server 支持 Client/Server 和 Pub/Sub 两种通信模式。</p><h3 id="opc-ua-client-server-模式" tabindex="-1"><a class="header-anchor" href="#opc-ua-client-server-模式"><span>OPC UA Client/Server 模式</span></a></h3><ul><li><strong>Client/Server 模式</strong>：在这种模式下，IoTDB 的流处理引擎通过 OPC UA Sink 与 OPC UA 服务器（Server）建立连接。OPC UA 服务器在其地址空间(Address Space) 中维护数据，IoTDB可以请求并获取这些数据。同时，其他OPC UA客户端（Client）也能访问服务器上的数据。</li></ul><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA01.png" alt="" style="width:70%;"></div><ul><li><p>特性：</p><ul><li>OPC UA 将从 Sink 收到的设备信息，按照树形模型整理到 Objects folder 下的文件夹中。</li><li>每个测点都被记录为一个变量节点，并记录当前数据库中的最新值。</li></ul></li></ul><h3 id="opc-ua-pub-sub-模式" tabindex="-1"><a class="header-anchor" href="#opc-ua-pub-sub-模式"><span>OPC UA Pub/Sub 模式</span></a></h3><ul><li><strong>Pub/Sub 模式</strong>：在这种模式下，IoTDB的流处理引擎通过 OPC UA Sink 向OPC UA 服务器（Server）发送数据变更事件。这些事件被发布到服务器的消息队列中，并通过事件节点 (Event Node) 进行管理。其他OPC UA客户端（Client）可以订阅这些事件节点，以便在数据变更时接收通知。</li></ul><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA02.png" alt="" style="width:70%;"></div><ul><li><p>特性：</p><ul><li><p>每个测点会被 OPC UA 包装成一个事件节点（EventNode）。</p></li><li><p>相关字段及其对应含义如下：</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">含义</th><th style="text-align:left;">类型（Milo）</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;">Time</td><td style="text-align:left;">时间戳</td><td style="text-align:left;">DateTime</td><td style="text-align:left;">1698907326198</td></tr><tr><td style="text-align:left;">SourceName</td><td style="text-align:left;">测点对应完整路径</td><td style="text-align:left;">String</td><td style="text-align:left;">root.test.opc.sensor0</td></tr><tr><td style="text-align:left;">SourceNode</td><td style="text-align:left;">测点数据类型</td><td style="text-align:left;">NodeId</td><td style="text-align:left;">Int32</td></tr><tr><td style="text-align:left;">Message</td><td style="text-align:left;">数据</td><td style="text-align:left;">LocalizedText</td><td style="text-align:left;">3.0</td></tr></tbody></table></li><li><p>Event 仅会发送给所有已经监听的客户端，客户端未连接则会忽略该 Event。</p></li></ul></li></ul><h2 id="iotdb-opc-server-启动方式" tabindex="-1"><a class="header-anchor" href="#iotdb-opc-server-启动方式"><span>IoTDB OPC Server 启动方式</span></a></h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><p>创建该 Sink 的语法如下：</p><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create pipe p1 </span>
<span class="line">    with source (...) </span>
<span class="line">    with processor (...) </span>
<span class="line">    with sink (&#39;sink&#39; = &#39;opc-ua-sink&#39;, </span>
<span class="line">               &#39;sink.opcua.tcp.port&#39; = &#39;12686&#39;, </span>
<span class="line">               &#39;sink.opcua.https.port&#39; = &#39;8443&#39;, </span>
<span class="line">               &#39;sink.user&#39; = &#39;root&#39;, </span>
<span class="line">               &#39;sink.password&#39; = &#39;root&#39;, </span>
<span class="line">               &#39;sink.opcua.security.dir&#39; = &#39;...&#39;</span>
<span class="line">              )</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th><th><strong>取值范围</strong></th><th><strong>是否必填</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>sink</td><td>OPC UA SINK</td><td>String: opc-ua-sink</td><td>必填</td><td></td></tr><tr><td>sink.opcua.model</td><td>OPC UA 使用的模式</td><td>String: client-server / pub-sub</td><td>选填</td><td>client-server</td></tr><tr><td>sink.opcua.tcp.port</td><td>OPC UA 的 TCP 端口</td><td>Integer: [0, 65536]</td><td>选填</td><td>12686</td></tr><tr><td>sink.opcua.https.port</td><td>OPC UA 的 HTTPS 端口</td><td>Integer: [0, 65536]</td><td>选填</td><td>8443</td></tr><tr><td>sink.opcua.security.dir</td><td>OPC UA 的密钥及证书目录</td><td>String: Path，支持绝对及相对目录</td><td>选填</td><td>iotdb 相关 DataNode 的 conf 目录下的 opc_security 文件夹 /<a href="httpsPort:tcpPort">httpsPort:tcpPort</a>。<br>如无 iotdb 的 conf 目录（例如 IDEA 中启动 DataNode），则为用户主目录下的 iotdb_opc_security 文件夹 /<a href="httpsPort:tcpPort">httpsPort:tcpPort</a></td></tr><tr><td>sink.opcua.enable-anonymous-access</td><td>OPC UA 是否允许匿名访问</td><td>Boolean</td><td>选填</td><td>true</td></tr><tr><td>sink.user</td><td>用户，这里指 OPC UA 的允许用户</td><td>String</td><td>选填</td><td>root</td></tr><tr><td>sink.password</td><td>密码，这里指 OPC UA 的允许密码</td><td>String</td><td>选填</td><td>root</td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-Bash line-numbers-mode" data-highlighter="prismjs" data-ext="Bash" data-title="Bash"><pre><code><span class="line">create pipe p1 </span>
<span class="line">    with sink (&#39;sink&#39; = &#39;opc-ua-sink&#39;，</span>
<span class="line">               &#39;sink.user&#39; = &#39;root&#39;, </span>
<span class="line">               &#39;sink.password&#39; = &#39;root&#39;);</span>
<span class="line">start pipe p1;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用限制" tabindex="-1"><a class="header-anchor" href="#使用限制"><span>使用限制</span></a></h3><ol><li><p><strong>必须存在 DataRegion</strong>：在 IoTDB 有 dataRegion 时，OPC UA 的服务器才会启动。因此，对于一个空的 IoTDB，需要写入一条数据，OPC UA 的服务器才有效。</p></li><li><p><strong>需连接才有数据</strong>：每一个订阅该服务器的客户端，不会收到 OPC Server 在连接之前写入IoTDB的数据。</p></li><li><p><strong>多 DataNode 会有分散发送 / 冲突问题</strong>：</p></li></ol><ul><li><p>对于有多个 dataRegion，且分散在不同 DataNode ip上的 IoTDB 集群，数据会在 dataRegion 的 leader 上分散发送。客户端需要对 DataNode ip 的配置端口分别监听。</p></li><li><p>建议在 1C1D 下使用该 OPC UA 服务器。</p></li></ul><ol start="4"><li>**不支持删除数据和修改测点类型：**在Client Server模式下，OPC UA无法删除数据或者改变数据类型的设置。而在Pub Sub模式下，如果数据被删除了，信息是无法推送给客户端的。</li></ol><h2 id="iotdb-opc-server-示例" tabindex="-1"><a class="header-anchor" href="#iotdb-opc-server-示例"><span>IoTDB OPC Server 示例</span></a></h2><h3 id="client-server-模式" tabindex="-1"><a class="header-anchor" href="#client-server-模式"><span>Client / Server 模式</span></a></h3><h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h4><ol><li><p>此处以UAExpert客户端为例，下载 UAExpert 客户端：<a href="https://www.unified-automation.com/downloads/opc-ua-clients.html" target="_blank" rel="noopener noreferrer">https://www.unified-automation.com/downloads/opc-ua-clients.html</a></p></li><li><p>安装 UAExpert，填写自身的证书等信息。</p></li></ol><h4 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h4><ol><li>使用如下 sql，创建并启动 client-server 模式的 OPC UA Sink。详细语法参见上文：<a href="#%E8%AF%AD%E6%B3%95">IoTDB OPC Server语法</a></li></ol><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create pipe p1 with sink (&#39;sink&#39;=&#39;opc-ua-sink&#39;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>写入部分数据。</li></ol><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">insert into root.test.db(time, s2) values(now(), 2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 此处自动创建元数据开启。</p><ol start="3"><li>在 UAExpert 中配置 iotdb 的连接，其中 password 填写为上述参数配置中 sink.password 中设定的密码（此处以默认密码root为例）：</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA03.png" alt="" style="width:60%;"></div><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA04.png" alt="" style="width:60%;"></div><ol start="4"><li>信任服务器的证书后，在左侧 Objects folder 即可看到写入的数据。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA05.png" alt="" style="width:60%;"></div><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA06.png" alt="" style="width:60%;"></div><ol start="5"><li>可以将左侧节点拖动到中间，并展示该节点的最新值：</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA07.png" alt="" style="width:60%;"></div><h3 id="pub-sub-模式" tabindex="-1"><a class="header-anchor" href="#pub-sub-模式"><span>Pub / Sub 模式</span></a></h3><h4 id="准备工作-1" tabindex="-1"><a class="header-anchor" href="#准备工作-1"><span>准备工作</span></a></h4><p>该代码位于 iotdb-example 包下的 <a href="https://github.com/apache/iotdb/tree/master/example/pipe-opc-ua-sink/src/main/java/org/apache/iotdb/opcua" target="_blank" rel="noopener noreferrer">opc-ua-sink 文件夹</a>中</p><p>代码中包含：</p><ul><li>主类（ClientTest）</li><li>Client 证书相关的逻辑（IoTDBKeyStoreLoaderClient）</li><li>Client 的配置及启动逻辑（ClientExampleRunner）</li><li>ClientTest 的父类（ClientExample）</li></ul><h3 id="快速开始-1" tabindex="-1"><a class="header-anchor" href="#快速开始-1"><span>快速开始</span></a></h3><p>使用步骤为：</p><ol><li>打开 IoTDB 并写入部分数据。</li></ol><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">insert into root.a.b(time, c, d) values(now(), 1, 2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 此处自动创建元数据开启。</p><ol start="2"><li>使用如下 sql，创建并启动 Pub-Sub 模式的 OPC UA Sink。详细语法参见上文：<a href="#%E8%AF%AD%E6%B3%95">IoTDB OPC Server语法</a></li></ol><div class="language-SQL line-numbers-mode" data-highlighter="prismjs" data-ext="SQL" data-title="SQL"><pre><code><span class="line">create pipe p1 with sink (&#39;sink&#39;=&#39;opc-ua-sink&#39;, </span>
<span class="line">                          &#39;sink.opcua.model&#39;=&#39;pub-sub&#39;);</span>
<span class="line">start pipe p1;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 此时能看到服务器的 conf 目录下创建了 opc 证书相关的目录。</p><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA08.png" alt="" style="width:60%;"></div><ol start="3"><li>直接运行 Client 连接，此时 Client 证书被服务器拒收。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA09.png" alt="" style="width:60%;"></div><ol start="4"><li>进入服务器的 sink.opcua.security.dir 目录下，进入 pki 的 rejected 目录，此时 Client 的证书应该已经在该目录下生成。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA10.png" alt="" style="width:60%;"></div><ol start="5"><li>将客户端的证书移入（不是复制） 同目录下 trusted 目录的 certs 文件夹中。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA11.png" alt="" style="width:60%;"></div><ol start="6"><li>再次打开 Client 连接，此时服务器的证书应该被 Client 拒收。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA12.png" alt="" style="width:60%;"></div><ol start="7"><li>进入客户端的 &lt;java.io.tmpdir&gt;/client/security 目录下，进入 pki 的 rejected 目录，将服务器的证书移入（不是复制）trusted 目录。</li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA13.png" alt="" style="width:60%;"></div><ol start="8"><li><p>打开 Client，此时建立双向信任成功， Client 能够连接到服务器。</p></li><li><p>向服务器中写入数据，此时 Client 中能够打印出收到的数据。</p></li></ol><div align="center"><img src="https://alioss.timecho.com/docs/img/OPCUA14.png" alt="" style="width:60%;"></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ol><li><p><strong>单机与集群</strong>：建议使用1C1D单机版，如果集群中有多个 DataNode，可能数据会分散发送在各个 DataNode 上，无法收听到全量数据。</p></li><li><p><strong>无需操作根目录下证书</strong>：在证书操作过程中，无需操作 IoTDB security 根目录下的 <code>iotdb-server.pfx</code> 证书和 client security 目录下的 <code>example-client.pfx</code> 目录。Client 和 Server 双向连接时，会将根目录下的证书发给对方，对方如果第一次看见此证书，就会放入 reject dir，如果该证书在 trusted/certs 里面，则能够信任对方。</p></li><li><p><strong>建议使用</strong> <strong>Java 17+</strong>：在 JVM 8 的版本中，可能会存在密钥长度限制，报 Illegal key size 错误。对于特定版本（如 jdk.1.8u151+），可以在 ClientExampleRunner 的 create client 里加入 <code>Security.</code><em><code>setProperty</code></em><code>(&quot;crypto.policy&quot;, &quot;unlimited&quot;);</code> 解决，也可以下载无限制的包 <code>local_policy.jar</code> 与 <code>US_export_policy </code>解决替换 <code>JDK/jre/lib/security </code>目录下的包解决，下载网址：<a href="https://www.oracle.com/java/technologies/javase-jce8-downloads.html%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase-jce8-downloads.html。</a></p></li></ol>`,69)]))}const o=t(a,[["render",n],["__file","Programming-OPC-UA_timecho.html.vue"]]),c=JSON.parse('{"path":"/zh/UserGuide/latest/API/Programming-OPC-UA_timecho.html","title":"OPC UA 协议","lang":"zh-CN","frontmatter":{"description":"OPC UA 协议 OPC UA OPC UA 是一种在自动化领域用于不同设备和系统之间进行通信的技术规范，用于实现跨平台、跨语言和跨网络的操作，为工业物联网提供一个可靠和安全的数据交换基础。IoTDB 中支持 OPC UA协议， IoTDB OPC Server 支持 Client/Server 和 Pub/Sub 两种通信模式。 OPC UA Cl...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://iotdb.apache.org/UserGuide/latest/API/Programming-OPC-UA_timecho.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/zh/UserGuide/latest/API/Programming-OPC-UA_timecho.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"OPC UA 协议"}],["meta",{"property":"og:description","content":"OPC UA 协议 OPC UA OPC UA 是一种在自动化领域用于不同设备和系统之间进行通信的技术规范，用于实现跨平台、跨语言和跨网络的操作，为工业物联网提供一个可靠和安全的数据交换基础。IoTDB 中支持 OPC UA协议， IoTDB OPC Server 支持 Client/Server 和 Pub/Sub 两种通信模式。 OPC UA Cl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-11-21T02:25:13.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-21T02:25:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OPC UA 协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-21T02:25:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"OPC UA","slug":"opc-ua","link":"#opc-ua","children":[{"level":3,"title":"OPC UA Client/Server 模式","slug":"opc-ua-client-server-模式","link":"#opc-ua-client-server-模式","children":[]},{"level":3,"title":"OPC UA Pub/Sub 模式","slug":"opc-ua-pub-sub-模式","link":"#opc-ua-pub-sub-模式","children":[]}]},{"level":2,"title":"IoTDB OPC Server 启动方式","slug":"iotdb-opc-server-启动方式","link":"#iotdb-opc-server-启动方式","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"使用限制","slug":"使用限制","link":"#使用限制","children":[]}]},{"level":2,"title":"IoTDB OPC Server 示例","slug":"iotdb-opc-server-示例","link":"#iotdb-opc-server-示例","children":[{"level":3,"title":"Client / Server 模式","slug":"client-server-模式","link":"#client-server-模式","children":[]},{"level":3,"title":"Pub / Sub 模式","slug":"pub-sub-模式","link":"#pub-sub-模式","children":[]},{"level":3,"title":"快速开始","slug":"快速开始-1","link":"#快速开始-1","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]}],"git":{"createdTime":1732016071000,"updatedTime":1732155913000,"contributors":[{"name":"W1y1r","email":"150988475+W1y1r@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.81,"words":2043},"filePathRelative":"zh/UserGuide/latest/API/Programming-OPC-UA_timecho.md","localizedDate":"2024年11月19日","autoDesc":true}');export{o as comp,c as data};

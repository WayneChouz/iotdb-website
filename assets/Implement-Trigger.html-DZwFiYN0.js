import{_ as n,c as e,b as a,o as l}from"./app-Dhp4U5dR.js";const t={};function o(p,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h1 id="how-to-implement-a-trigger" tabindex="-1"><a class="header-anchor" href="#how-to-implement-a-trigger"><span>How to implement a trigger</span></a></h1><p>You need to implement the trigger by writing a Java class, where the dependency shown below is required. If you use <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>, you can search for them directly from the <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven repository</a>.</p><h2 id="dependency" tabindex="-1"><a class="header-anchor" href="#dependency"><span>Dependency</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.apache.iotdb&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;iotdb-server&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;1.0.0&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;provided&lt;/</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the dependency version should be correspondent to the target server version.</p><h2 id="interface-description" tabindex="-1"><a class="header-anchor" href="#interface-description"><span>Interface Description</span></a></h2><p>To implement a trigger, you need to implement the <code>org.apache.iotdb.trigger.api.Trigger</code> class.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.enums.FailureStrategy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.record.Tablet</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Trigger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method is mainly used to validate {@link TriggerAttributes} before calling {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Trigger#onCreate(TriggerAttributes)}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#7F848E;font-style:italic;"> TriggerAttributes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method will be called when creating a trigger after validation.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#7F848E;font-style:italic;"> TriggerAttributes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * This method will be called when dropping a trigger.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onDrop</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * When restarting a DataNode, Triggers that have been registered will be restored and this method</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * will be called during the process of restoring.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> restore</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Overrides this method to set the expected FailureStrategy, {@link FailureStrategy#OPTIMISTIC}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * is the default strategy.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@link FailureStrategy}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#61AFEF;"> getFailureStrategy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OPTIMISTIC</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#7F848E;font-style:italic;"> see {@link Tablet} for detailed information of data structure. Data that is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     inserted will be constructed as a Tablet and you can define process logic with {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     Tablet}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> true if successfully fired</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This class provides two types of programming interfaces: <strong>Lifecycle related interfaces</strong> and <strong>data change listening related interfaces</strong>. All the interfaces in this class are not required to be implemented. When the interfaces are not implemented, the trigger will not respond to the data changes. You can implement only some of these interfaces according to your needs.</p><p>Descriptions of the interfaces are as followed.</p><h3 id="lifecycle-related-interfaces" tabindex="-1"><a class="header-anchor" href="#lifecycle-related-interfaces"><span>Lifecycle related interfaces</span></a></h3><table><thead><tr><th>Interface</th><th>Description</th></tr></thead><tbody><tr><td><em>default void validate(TriggerAttributes attributes) throws Exception {}</em></td><td>When you creates a trigger using the <code>CREATE TRIGGER</code> statement, you can specify the parameters that the trigger needs to use, and this interface will be used to verify the correctness of the parameters。</td></tr><tr><td><em>default void onCreate(TriggerAttributes attributes) throws Exception {}</em></td><td>This interface is called once when you create a trigger using the <code>CREATE TRIGGER</code> statement. During the lifetime of each trigger instance, this interface will be called only once. This interface is mainly used for the following functions: helping users to parse custom attributes in SQL statements (using <code>TriggerAttributes</code>). You can create or apply for resources, such as establishing external links, opening files, etc.</td></tr><tr><td><em>default void onDrop() throws Exception {}</em></td><td>This interface is called when you drop a trigger using the <code>DROP TRIGGER</code> statement. During the lifetime of each trigger instance, this interface will be called only once. This interface mainly has the following functions: it can perform the operation of resource release and can be used to persist the results of trigger calculations.</td></tr><tr><td><em>default void restore() throws Exception {}</em></td><td>When the DataNode is restarted, the cluster will restore the trigger instance registered on the DataNode, and this interface will be called once for stateful trigger during the process. After the DataNode where the stateful trigger instance is located goes down, the cluster will restore the trigger instance on another available DataNode, calling this interface once in the process. This interface can be used to customize recovery logic.</td></tr></tbody></table><h3 id="data-change-listening-related-interfaces" tabindex="-1"><a class="header-anchor" href="#data-change-listening-related-interfaces"><span>Data change listening related interfaces</span></a></h3><h4 id="listening-interface" tabindex="-1"><a class="header-anchor" href="#listening-interface"><span>Listening interface</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#7F848E;font-style:italic;"> see {@link Tablet} for detailed information of data structure. Data that is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     inserted will be constructed as a Tablet and you can define process logic with {@link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *     Tablet}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> true if successfully fired</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;"> tablet) throws Exception {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the data changes, the trigger uses the Tablet as the unit of firing operation. You can obtain the metadata and data of the corresponding sequence through Tablet, and then perform the corresponding trigger operation. If the fire process is successful, the return value should be true. If the interface returns false or throws an exception, we consider the trigger fire process as failed. When the trigger fire process fails, we will perform corresponding operations according to the listening strategy interface.</p><p>When performing an INSERT operation, for each time series in it, we will detect whether there is a trigger that listens to the path pattern, and then assemble the time series data that matches the path pattern listened by the same trigger into a new Tablet for trigger fire interface. Can be understood as:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PartialPath</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Trigger</span><span style="color:#ABB2BF;">&gt;&gt;</span><span style="color:#E06C75;"> pathToTriggerListMap </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#E5C07B;"> Map</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Trigger</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> Tablet</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Note that currently we do not make any guarantees about the order in which triggers fire.</strong></p><p>Here is an example:</p><p>Suppose there are three triggers, and the trigger event of the triggers are all BEFORE INSERT:</p><ul><li>Trigger1 listens on <code>root.sg.*</code></li><li>Trigger2 listens on <code>root.sg.a</code></li><li>Trigger3 listens on <code>root.sg.b</code></li></ul><p>Insertion statement:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">insert into</span><span style="color:#D19A66;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">sg</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;">, a, b) </span><span style="color:#C678DD;">values</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The time series <code>root.sg.a</code> matches Trigger1 and Trigger2, and the sequence <code>root.sg.b</code> matches Trigger1 and Trigger3, then:</p><ul><li>The data of <code>root.sg.a</code> and <code>root.sg.b</code> will be assembled into a new tablet1, and Trigger1.fire(tablet1) will be executed at the corresponding Trigger Event.</li><li>The data of <code>root.sg.a</code> will be assembled into a new tablet2, and Trigger2.fire(tablet2) will be executed at the corresponding Trigger Event.</li><li>The data of <code>root.sg.b</code> will be assembled into a new tablet3, and Trigger3.fire(tablet3) will be executed at the corresponding Trigger Event.</li></ul><h4 id="listening-strategy-interface" tabindex="-1"><a class="header-anchor" href="#listening-strategy-interface"><span>Listening strategy interface</span></a></h4><p>When the trigger fails to fire, we will take corresponding actions according to the strategy set by the listening strategy interface. You can set <code>org.apache.iotdb.trigger.api.enums.FailureStrategy</code>. There are currently two strategies, optimistic and pessimistic:</p><ul><li>Optimistic strategy: The trigger that fails to fire does not affect the firing of subsequent triggers, nor does it affect the writing process, that is, we do not perform additional processing on the sequence involved in the trigger failure, only log the failure to record the failure, and finally inform user that data insertion is successful, but the trigger fire part failed.</li><li>Pessimistic strategy: The failure trigger affects the processing of all subsequent Pipelines, that is, we believe that the firing failure of the trigger will cause all subsequent triggering processes to no longer be carried out. If the trigger event of the trigger is BEFORE INSERT, then the insertion will no longer be performed, and the insertion failure will be returned directly.</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"> /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Overrides this method to set the expected FailureStrategy, {@link FailureStrategy#OPTIMISTIC}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * is the default strategy.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@link FailureStrategy}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#61AFEF;"> getFailureStrategy</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> FailureStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OPTIMISTIC</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><p>If you use <a href="http://search.maven.org/" target="_blank" rel="noopener noreferrer">Maven</a>, you can refer to our sample project <strong>trigger-example</strong>.</p><p>You can find it <a href="https://github.com/apache/iotdb/tree/master/example/trigger" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Here is the code from one of the sample projects:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Licensed to the Apache Software Foundation (ASF) under one</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * or more contributor license agreements.  See the NOTICE file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * distributed with this work for additional information</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * regarding copyright ownership.  The ASF licenses this file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * to you under the Apache License, Version 2.0 (the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &quot;License&quot;); you may not use this file except in compliance</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * with the License.  You may obtain a copy of the License at</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Unless required by applicable law or agreed to in writing,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * software distributed under the License is distributed on an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * KIND, either express or implied.  See the License for the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * specific language governing permissions and limitations</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * under the License.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.apache.iotdb.trigger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.engine.trigger.sink.alertmanager.AlertManagerConfiguration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.engine.trigger.sink.alertmanager.AlertManagerEvent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.db.engine.trigger.sink.alertmanager.AlertManagerHandler</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.Trigger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.trigger.api.TriggerAttributes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.file.metadata.enums.TSDataType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.record.Tablet</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.iotdb.tsfile.write.schema.MeasurementSchema</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.slf4j.Logger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.slf4j.LoggerFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.HashMap</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ClusterAlertingExample</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Trigger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Logger</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LoggerFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLogger</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ClusterAlertingExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AlertManagerHandler</span><span style="color:#E06C75;"> alertManagerHandler </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AlertManagerHandler</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AlertManagerConfiguration</span><span style="color:#E06C75;"> alertManagerConfiguration </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#C678DD;">      new</span><span style="color:#61AFEF;"> AlertManagerConfiguration</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;http://127.0.0.1:9093/api/v2/alerts&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> alertname</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> labels </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> annotations </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TriggerAttributes</span><span style="color:#E06C75;font-style:italic;"> attributes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    alertname </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;alert_test&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;series&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;root.ln.wf01.wt01.temperature&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    annotations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;summary&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;high temperature&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    annotations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;{{.alertname}}: {{.series}} is {{.value}}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(alertManagerConfiguration);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onDrop</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> fire</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Tablet</span><span style="color:#E06C75;font-style:italic;"> tablet</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MeasurementSchema</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">measurementSchemaList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tablet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSchemas</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, n </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> measurementSchemaList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">(); i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> n; i++) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">measurementSchemaList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(i).</span><span style="color:#61AFEF;">getType</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TSDataType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DOUBLE</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // for example, we only deal with the columns of Double type</span></span>
<span class="line"><span style="color:#C678DD;">        double</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">values</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">[]) </span><span style="color:#E5C07B;">tablet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">values</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> values) {</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 100.0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;trigger value &gt; 100&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(value));</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;critical&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            AlertManagerEvent</span><span style="color:#E06C75;"> alertManagerEvent</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">                new</span><span style="color:#61AFEF;"> AlertManagerEvent</span><span style="color:#ABB2BF;">(alertname, labels, annotations);</span></span>
<span class="line"><span style="color:#E5C07B;">            alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onEvent</span><span style="color:#ABB2BF;">(alertManagerEvent);</span></span>
<span class="line"><span style="color:#ABB2BF;">          } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (value </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 50.0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;trigger value &gt; 50&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(value));</span></span>
<span class="line"><span style="color:#E5C07B;">            labels</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;severity&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;warning&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            AlertManagerEvent</span><span style="color:#E06C75;"> alertManagerEvent</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">                new</span><span style="color:#61AFEF;"> AlertManagerEvent</span><span style="color:#ABB2BF;">(alertname, labels, annotations);</span></span>
<span class="line"><span style="color:#E5C07B;">            alertManagerHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onEvent</span><span style="color:#ABB2BF;">(alertManagerEvent);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const r=n(t,[["render",o],["__file","Implement-Trigger.html.vue"]]),c=JSON.parse('{"path":"/UserGuide/V1.1.x/Trigger/Implement-Trigger.html","title":"How to implement a trigger","lang":"en-US","frontmatter":{"description":"How to implement a trigger You need to implement the trigger by writing a Java class, where the dependency shown below is required. If you use Maven, you can search for them dir...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://iotdb.apache.org/zh/UserGuide/V1.1.x/Trigger/Implement-Trigger.html"}],["meta",{"property":"og:url","content":"https://iotdb.apache.org/UserGuide/V1.1.x/Trigger/Implement-Trigger.html"}],["meta",{"property":"og:site_name","content":"IoTDB Website"}],["meta",{"property":"og:title","content":"How to implement a trigger"}],["meta",{"property":"og:description","content":"How to implement a trigger You need to implement the trigger by writing a Java class, where the dependency shown below is required. If you use Maven, you can search for them dir..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-10T03:11:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-10T03:11:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to implement a trigger\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-10T03:11:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Dependency","slug":"dependency","link":"#dependency","children":[]},{"level":2,"title":"Interface Description","slug":"interface-description","link":"#interface-description","children":[{"level":3,"title":"Lifecycle related interfaces","slug":"lifecycle-related-interfaces","link":"#lifecycle-related-interfaces","children":[]},{"level":3,"title":"Data change listening related interfaces","slug":"data-change-listening-related-interfaces","link":"#data-change-listening-related-interfaces","children":[]}]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}],"git":{"createdTime":1688958677000,"updatedTime":1688958677000,"contributors":[{"name":"CritasWang","username":"CritasWang","email":"critas@outlook.com","commits":1,"url":"https://github.com/CritasWang"}]},"readingTime":{"minutes":5.33,"words":1598},"filePathRelative":"UserGuide/V1.1.x/Trigger/Implement-Trigger.md","localizedDate":"July 10, 2023","autoDesc":true}');export{r as comp,c as data};
